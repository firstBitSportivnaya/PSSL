//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// Читает табличный документ в массив структур
//
//	Параметры:
//		ТабличныйДокумент - ТабличныйДокумент - Исходный табличный документ
//		НомерКолонки - Число - Номер строки таблицы, с которой следует начать считывание
//		НомерСтроки - Число - Номер колонки таблицы, с которой следует начать считывание
//	Возвращаемое значение:
//		Массив из Структура - Данные табличного документа	
Функция ДанныеТабличногоДокумента(ТабличныйДокумент, Знач НомерКолонки = 1, Знач НомерСтроки = 1) Экспорт
	
	МассивДанных = Новый Массив;
	СведенияКолонок = Новый Массив;
	
	ЗаменяемыеСтроки = ЮТТестовыеДанныеСлужебный.ПодстрокиДляЗаменыВИменахСвойств();
	
	ЗначениеКолонки = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст;
	Пока ЗначениеЗаполнено(ЗначениеКолонки) Цикл
		
		Для Каждого Замена Из ЗаменяемыеСтроки Цикл
			ПодстрокаПоиска = Замена.Ключ;
			ПодстрокаЗамены = Замена.Значение;
			ИмяКолонки = СтрЗаменить(ЗначениеКолонки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЦикла;
		
		Сведения = Новый Структура("НомерКолонки, ИмяКолонки", НомерКолонки, ИмяКолонки);
		СведенияКолонок.Добавить(Сведения);
		
		НомерКолонки = НомерКолонки + 1;
		ЗначениеКолонки = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст;
		
	КонецЦикла;
	
	НомерСтроки = НомерСтроки + 1;
	
	Пока ЕстьЗначенияВСтроке(ТабличныйДокумент, НомерСтроки, СведенияКолонок) Цикл
		
		Структура = Новый Структура;
		
		Для Каждого Сведения Из СведенияКолонок Цикл
			Значение = СокрЛП(ТабличныйДокумент.Область(НомерСтроки, Сведения.НомерКолонки).Текст);
			Структура.Вставить(Сведения.ИмяКолонки, Значение);
		КонецЦикла;
		
		МассивДанных.Добавить(Структура);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции
	
Функция ПривестиЗначениеКДате(ОписаниеТипа, Знач Значение) Экспорт
	
	ДатаМассив = СтрРазделить(Значение, ".,:T-/ ");
	
	НетВремени = 3;
	ЕстьВремя = 7;
	Полдень = 12;
	
	ДлинаДеньМесяц = 2;
	ДлинаГод = 4;
	
	ДатаИзСтроки_ПроверкаДлиныДаты(ДатаМассив.Количество(), НетВремени, ЕстьВремя);
	
	/////////////////////////////////////////////////////////////////////////////////
	
	ДатаИзСтроки_ОбработкаМассиваДаты(ДатаМассив); // если вдруг кто-то забыл вставить что-то между разделителями.
	
	ДатаИзСтроки_ПроверкаМесяца(ДатаМассив[1]); // проверка месяца, корректно или нет
	
	Если ДатаМассив.Количество() = ЕстьВремя Тогда // время формата HH:mm:ss tt или H:mm:ss tt
		
		ВГр = ДатаМассив.ВГраница();
		ПозЧас = 3;
		
		ДатаМассив[ВГр] = ВРег(ДатаМассив[ВГр]);
		ЧасДоп = ?(ДатаМассив[ВГр] = "PM", Полдень, 0);
		ДатаМассив.Удалить(ВГр);
		
		ЧасовВСутках = 24;
		// если все-таки решили вписать не существующий формат попробуем его воспринять адекватно.
		ДатаМассив[ПозЧас] = Строка(?(Число(ДатаМассив[ПозЧас]) + ЧасДоп >= ЧасовВСутках, ДатаМассив[ПозЧас], Число(ДатаМассив[ПозЧас]) + ЧасДоп));
		
	КонецЕсли;
	
	Для Индекс = 0 По ДатаМассив.ВГраница() Цикл // добавляем ведущие нули в маски d.M.yy, yy.M.d, H:mm:ss
		
		ДатаМассив[Индекс] = Формат(Число(ДатаМассив[Индекс]), "ЧЦ=" + ?(СтрДлина(ДатаМассив[Индекс]) > ДлинаДеньМесяц, "4", "2") + "; ЧВН=; ЧГ=0; ЧН=00");
		
	КонецЦикла;
	
	ПозГод = 2;
	ПозМесяц = 1;
	ПозДень = 0;
	
	// Проверка гггг.мм.дд или дд.мм.гггг
	Если СтрДлина(ДатаМассив[ПозГод]) = ДлинаГод Тогда
		
		ВремДата = ДатаМассив[ПозДень];
		ДатаМассив[ПозДень] = ДатаМассив[ПозГод];
		ДатаМассив[ПозГод] = ВремДата;
		
	КонецЕсли;
	
	// обработка масок dd.MM.yy и yy.MM.dd, первая маска в приоритете. 
	Если СтрДлина(ДатаМассив[0]) = ДлинаДеньМесяц И СтрДлина(ДатаМассив[ПозГод]) = ДлинаДеньМесяц Тогда
		
		УсловнаяГраница = 66; // что больше, то 20 век, что меньше - 21
		Год = ?(Число(ДатаМассив[ПозГод]) > УсловнаяГраница, "19", "20");
		
		Попытка // попытаемся превратить ее в дату
			
			// Собственно - проверка, попытка получить дату
			//@skip-check module-unused-local-variable - Необходима для помещения результата получения даты из строки.
			ТестоваяДата = Дата(Год + ДатаМассив[ПозГод] + ДатаМассив[ПозМесяц] + ДатаМассив[ПозДень]);
			
			ВремДата = ДатаМассив[ПозДень];
			ДатаМассив[ПозДень] = (Год + ДатаМассив[ПозГод]);
			ДатаМассив[ПозГод] = ВремДата;
			
		Исключение // если не получилось, значит маска yy.MM.dd
			
			ДатаМассив[ПозДень] = (Год + ДатаМассив[ПозДень]);
			
		КонецПопытки;
		
	КонецЕсли;
		
	Результат = ОписаниеТипа.ПривестиЗначение(СтрСоединить(ДатаМассив));
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиЗначениеКЧислу(ОписаниеТипа, Знач Значение) Экспорт
	
	Значение = СтрЗаменить(Значение, ",", ".");
	Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Значение = СтрЗаменить(Значение, " ", "");
	Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЗначенияВСтроке(ТабличныйДокумент, НомерСтроки, СведенияКолонок)
	
	ЕстьЗаполненныеЗначения = Ложь;
	
	Для Каждого Сведения Из СведенияКолонок Цикл
		Если ЕстьЗаполненныеЗначения Тогда
			Прервать;
		КонецЕсли;
		НомерКолонки = Сведения.НомерКолонки;
		ЕстьЗаполненныеЗначения = ЗначениеЗаполнено(ТабличныйДокумент.Область(НомерСтроки, НомерКолонки).Текст);
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеЗначения;
	
КонецФункции

Процедура ДатаИзСтроки_ПроверкаДлиныДаты(ДлинаСтроки, ДлинаБезВремени = 0, ДлинаСВременем = 0, ДатаСтрока = "")
	
	Если ДлинаБезВремени = 0 ИЛИ ДлинаСВременем = 0 Тогда
		
		ДлинаБезВремени = 6;
		ДлинаСВременем = 22;
		
	КонецЕсли;
	
	// Временные зоны не поддерживаются, однако формат даты в нулевой зоне попадает в допустимую длину других поддерживаемых форматов.
	ДлинаДатыВНулевойЗоне = 20;
	ЭтоНулеваяЗона = ДлинаСтроки = ДлинаДатыВНулевойЗоне И СтрЗаканчиваетсяНа(ДатаСтрока, "Z");
	
	Если ДлинаСтроки < ДлинаБезВремени Или ДлинаСтроки > ДлинаСВременем Или ЭтоНулеваяЗона Тогда
		ВызватьИсключение ЮТИсключения.НекорректныеПараметрыМетода("ПривестиЗначениеКДате", "Дата в строке не подходит ни под одну маску.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаИзСтроки_ОбработкаМассиваДаты(ДатаМассив)
	
	Для Индекс = 0 По ДатаМассив.ВГраница() Цикл
		
		ДатаМассив[Индекс] = ?(СтрДлина(ДатаМассив[Индекс]) = 0, "0", ДатаМассив[Индекс]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДатаИзСтроки_ПроверкаМесяца(МесяцСтрокой)
	
	МесяцевВГоду = 12;
	Если Число(МесяцСтрокой) > МесяцевВГоду Или Число(МесяцСтрокой) = 0 Тогда
		ВызватьИсключение ЮТИсключения.НекорректныеПараметрыМетода("ПривестиЗначениеКДате", "Месяц выходит за границы диапазона.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
