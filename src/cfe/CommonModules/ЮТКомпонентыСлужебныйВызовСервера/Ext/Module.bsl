//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ФайлКомпоненты(Знач ИмяМакета, Знач ОперационнаяСистема, Знач Архитектура) Экспорт
	
	Данные = ЮТОбщийСлужебныйВызовСервера.Макет(ИмяМакета);
	ЧтениеАрхива = Новый ЧтениеZipФайла();
	ЧтениеАрхива.Открыть(Данные.ОткрытьПотокДляЧтения());
	
	ИмяФайлаКомпоненты = ИмяФайлаКомпоненты(ЧтениеАрхива, ОперационнаяСистема, Архитектура);
	
	Если ИмяФайлаКомпоненты = Неопределено Тогда
		ВызватьИсключение "Компонента не поддерживает клиентское окружение";
	КонецЕсли;
	
	Данные = ДвоичныеДанныеЭлемента(ЧтениеАрхива, ИмяФайлаКомпоненты);
	
	Возврат Новый ФиксированнаяСтруктура("ИмяФайла, Данные", ИмяФайлаКомпоненты, Данные);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяФайлаКомпоненты(ЧтениеАрхива, ОперационнаяСистема, Архитектура)
	
	Данные = ДвоичныеДанныеЭлемента(ЧтениеАрхива, "MANIFEST.XML");
	
	Если Данные = Неопределено Тогда
		ВызватьИсключение "Архив компоненты не содержит манифеста";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(Данные.ОткрытьПотокДляЧтения());
	
	ИмяФайлаКомпоненты = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЭтоПодходящийУзел(ЧтениеXML, ОперационнаяСистема, Архитектура) Тогда
			ИмяФайлаКомпоненты = ЧтениеXML.ЗначениеАтрибута("path");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ИмяФайлаКомпоненты;
	
КонецФункции

Функция ЭтоПодходящийУзел(ЧтениеXML, ОперационнаяСистема, Архитектура)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ СтрСравнить(ЧтениеXML.Имя, "component") <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперационнаяСистемаУзла = ЧтениеXML.ЗначениеАтрибута("os");
	АрхитектураУзла = ЧтениеXML.ЗначениеАтрибута("arch");
	
	Возврат ОперационнаяСистема = ОперационнаяСистемаУзла И Архитектура = АрхитектураУзла;
	
КонецФункции

Функция ДвоичныеДанныеЭлемента(ЧтениеАрхива, ИмяФайла)
	
	ЭлементФайла = Неопределено;
	
	Для Каждого Элемент Из ЧтениеАрхива.Элементы Цикл
		Если СтрСравнить(Элемент.ПолноеИмя, ИмяФайла) = 0 Тогда
			ЭлементФайла = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЧтениеАрхива.Извлечь(ЭлементФайла, ИмяВременногоФайла, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	Данные = Новый ДвоичныеДанные(ЮТФайлы.ОбъединитьПути(ИмяВременногоФайла, ИмяФайла));
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти
