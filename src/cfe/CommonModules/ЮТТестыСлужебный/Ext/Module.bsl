//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьТестовыйНабор(Имя, ТегиСтрокой) Экспорт
	
	ИсполняемыеСценарии = СценарииМодуля();
	
	Если НЕ ЭтоИсполняемыеСценарии(ИсполняемыеСценарии) Тогда
		ВызватьИсключение "Первый параметр должен быть результатом метода ЮТТесты.ИсполняемыеСценарии";
	КонецЕсли;
	
	Если ПустаяСтрока(Имя) Тогда
		ВызватьИсключение "Имя тестового набора не может быть пустым";
	КонецЕсли;
	
	Контекст = Контекст();
	НовыйТестовыйНабор = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(Имя, ТегиСтрокой);
	
	ИсполняемыеСценарии.ТестовыеНаборы.Добавить(НовыйТестовыйНабор);
	Контекст.ТекущийНабор = НовыйТестовыйНабор;
	Контекст.ТекущийЭлемент = НовыйТестовыйНабор;
	
КонецПроцедуры

Процедура ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Контексты) Экспорт
	
	Контекст = Контекст();
	Набор = Контекст.ТекущийНабор;
	
	ЭтоИсполняемыеСценарии = ЭтоИсполняемыеСценарии(Набор);
	ЭтоТестовыйНабор = ЭтоТестовыйНабор(Набор);
	
	Если НЕ (ЭтоИсполняемыеСценарии ИЛИ ЭтоТестовыйНабор) Тогда
		ВызватьИсключение "Первый параметр должен быть результатом метода ЮТТесты.ИсполняемыеСценарии или ЮТТесты.ТестовыйНабор";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТестовогоМетода) Тогда
		ВызватьИсключение "Имя тестового метода не может быть пустым";
	КонецЕсли;
	
	Тест = ОписаниеТеста(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Контексты);
	ДобавитьТестВНабор(Контекст, Тест, Ложь);
	
КонецПроцедуры

Процедура ДобавитьКлиентскийТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой) Экспорт
	
	ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, КонтекстыВызоваКлиента());
	
КонецПроцедуры

Процедура ДобавитьСерверныйТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой) Экспорт
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	
	ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Режимы.Сервер);
	
КонецПроцедуры

Процедура НастройкаИсполнения(ИмяПараметра, Значение) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.НастройкиВыполнения.Вставить(ИмяПараметра, Значение);
	
КонецПроцедуры

Процедура СПараметрами(Параметры, Знач НовыеКонтексты) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	ИначеЕсли НЕ ЭтоОписаниеТеста(Контекст.ТекущийЭлемент) Тогда
		ВызватьИсключение "Параметры устанавливаются только для теста";
	КонецЕсли;
	
	ЭтоПервыйВызовСПараметрами = Контекст.ТекущийЭлемент.Параметры = Неопределено;
	УстановитьНовыйКонтекст = ЗначениеЗаполнено(НовыеКонтексты);
	
	Если ЭтоПервыйВызовСПараметрами Тогда
		Контекст.БазовыйТест = ЮТКоллекции.СкопироватьСтруктуру(Контекст.ТекущийЭлемент);
	КонецЕсли;
	
	Если УстановитьНовыйКонтекст Тогда
		НормализованныеКонтексты = НормализованныеКонтексты(НовыеКонтексты);
		НовыеКонтексты = ЮТКоллекции.ПересечениеМассивов(Контекст.БазовыйТест.КонтекстВызова, НормализованныеКонтексты);
		
		Если НЕ ЗначениеЗаполнено(НовыеКонтексты) Тогда
			ВызватьИсключение СтрШаблон("Не пересекаются контексты базового теста %1 и устанавливаемые %2",
										ЮТКоллекции.ПредставлениеМассива(Контекст.БазовыйТест.КонтекстВызова),
										ЮТКоллекции.ПредставлениеМассива(НормализованныеКонтексты));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоПервыйВызовСПараметрами Тогда
		НоваяНастройка = ЮТКоллекции.СкопироватьСтруктуру(Контекст.БазовыйТест);
		ДобавитьТестВНабор(Контекст, НоваяНастройка, Истина);
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.Параметры = Параметры;
	
	Если УстановитьНовыйКонтекст Тогда
		Контекст.ТекущийЭлемент.КонтекстВызова = НовыеКонтексты;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПредставление(Представление, ИспользуяИмя) Экспорт
	
	ТекущийЭлемент = Контекст().ТекущийЭлемент;
	Если ИспользуяИмя Тогда
		ТекущийЭлемент.Представление = СтрШаблон("%1. %2", ТекущийЭлемент.Имя, Представление);
	Иначе
		ТекущийЭлемент.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

Функция КонтекстыВызоваКлиента() Экспорт
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	Возврат ЮТКоллекции.ЗначениеВМассиве(Режимы.КлиентУправляемоеПриложение, Режимы.КлиентОбычноеПриложение);
	
КонецФункции

// Описание сценариев модуля
//
// Возвращаемое значение:
//  Структура - см. ИсполняемыеСценарии
Функция СценарииМодуля() Экспорт
	
	Возврат Контекст().ИсполняемыеСценарии;
	
КонецФункции

Функция Контекст() Экспорт
	
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста("КонтекстРегистрацияТестов");
	
КонецФункции

#Область ОбработчикиСобытий

Процедура ПередЧтениемСценариевМодуля(МетаданныеМодуля) Экспорт
	
	ИнициализироватьКонтекст(МетаданныеМодуля);
	ЮТСобытияСлужебный.ПередЧтениемСценариевМодуля(МетаданныеМодуля);
	
КонецПроцедуры

Процедура ПослеЧтенияСценариевМодуля() Экспорт
	
	Контекст = Контекст();
	ЮТСобытияСлужебный.ПослеЧтенияСценариевМодуля(Контекст.МетаданныеМодуля, Контекст.ИсполняемыеСценарии);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Исполняемые сценарии.
//
// Параметры:
//  МетаданныеМодуля - см. ЮТФабрикаСлужебный.ОписаниеМодуля
//
// Возвращаемое значение:
//  Структура - Исполняемые сценарии:
// * ТестовыеНаборы - Массив из см. ЮТФабрикаСлужебный.ОписаниеТестовогоНабора - Тестовые наборы модуля
// * НастройкиВыполнения- Структура - Настройки исполнения теста
Функция ИсполняемыеСценарии(МетаданныеМодуля)
	
	Структура = Новый Структура;
	Структура.Вставить("ТестовыеНаборы", Новый Массив());
	Структура.Вставить("НастройкиВыполнения", Новый Структура());
	
	Набор = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(МетаданныеМодуля.Имя);
	Набор.НастройкиВыполнения = Структура.НастройкиВыполнения; // Общие настройки с набором по умолчанию
	Структура.ТестовыеНаборы.Добавить(Набор);
	
	Возврат Структура;
	
КонецФункции

Функция КонтекстыВызоваПоУмолчанию()
	
	Возврат ЮТФабрикаСлужебный.КонтекстыМодуля(Контекст().МетаданныеМодуля);
	
КонецФункции

Функция ОписаниеТеста(Имя, Знач Представление, ТегиСтрокой, Знач Контексты)
	
	Контексты = НормализованныеКонтексты(Контексты);
	
	Возврат ЮТФабрикаСлужебный.ОписаниеТеста(Имя, Представление, Контексты, ТегиСтрокой);
	
КонецФункции

Функция ЭтоИсполняемыеСценарии(ИсполняемыеСценарии)
	
	Возврат ТипЗнч(ИсполняемыеСценарии) = Тип("Структура")
		И ТипЗнч(ЮТКоллекции.ЗначениеСтруктуры(ИсполняемыеСценарии, "ТестовыеНаборы")) = Тип("Массив");
	
КонецФункции

Функция ЭтоТестовыйНабор(ТестовыйНабор)
	
	Возврат ТипЗнч(ТестовыйНабор) = Тип("Структура")
		И ТипЗнч(ЮТКоллекции.ЗначениеСтруктуры(ТестовыйНабор, "Тесты")) = Тип("Массив");
	
КонецФункции

Функция ЭтоОписаниеТеста(Описание)
	
	Возврат ТипЗнч(Описание) = Тип("Структура")
		И ТипЗнч(ЮТКоллекции.ЗначениеСтруктуры(Описание, "КонтекстВызова")) = Тип("Массив");
	
КонецФункции

Процедура ДобавитьТестВНабор(Контекст, Тест, ЭтоКопия)
	
	Если НЕ ЭтоКопия Тогда
		Контекст.БазовыйТест = Неопределено;
	КонецЕсли;
	
	Контекст.ТекущийНабор.Тесты.Добавить(Тест);
	Контекст.ТекущийЭлемент = Тест;
	Тест.НомерВНаборе = Контекст.ТекущийНабор.Тесты.Количество();
	
КонецПроцедуры

Процедура ИнициализироватьКонтекст(МетаданныеМодуля)
	
	ИсполняемыеСценарии = ИсполняемыеСценарии(МетаданныеМодуля);
	Набор = ИсполняемыеСценарии.ТестовыеНаборы[0];
	
	Контекст = Новый Структура();
	
	Контекст.Вставить("МетаданныеМодуля", МетаданныеМодуля);
	Контекст.Вставить("ИсполняемыеСценарии", ИсполняемыеСценарии);
	Контекст.Вставить("ТекущийНабор", Набор);
	Контекст.Вставить("ТекущийЭлемент", Набор);
	Контекст.Вставить("БазовыйТест", Неопределено);
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста("КонтекстРегистрацияТестов", Контекст);
	
КонецПроцедуры

Функция НормализованныеКонтексты(ПараметрКонтексты)
	
	Если НЕ ЗначениеЗаполнено(ПараметрКонтексты) Тогда
		Контексты = КонтекстыВызоваПоУмолчанию();
	ИначеЕсли ТипЗнч(ПараметрКонтексты) = Тип("Строка") Тогда
		Контексты = СтрРазделить(ПараметрКонтексты, ", ", Ложь);
	Иначе
		Контексты = ПараметрКонтексты;
	КонецЕсли;
	
	Возврат Контексты;
	
КонецФункции

#КонецОбласти
