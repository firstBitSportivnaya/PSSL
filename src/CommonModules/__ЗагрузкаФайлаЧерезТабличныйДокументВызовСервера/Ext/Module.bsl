// MIT License

// Copyright (c) 2024 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ПрограммныйИнтерфейс

// Процедура - Формирование таблицы
//
// Параметры:
//  АдресВХранилище	 - Строка - Адрес файла во временном хранилище
//  Расширение		 - Строка - Расширение файла (xls, xlsx)
//  Параметры		 - Структура - Параметры загрузки
//
Процедура ФормированиеТаблицы(АдресВХранилище, Расширение, Параметры) Экспорт
	
	Макет			= Параметры.Макет;
	АдресПомещения	= Параметры.АдресПомещения;
	НазваниеЛиста	= Параметры.НазваниеЛиста;
	НомерСтроки		= Параметры.НомерПервойСтроки;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	Лист = ?(ЗначениеЗаполнено(НазваниеЛиста), Табдок.Области.Найти(СтрЗаменить(НазваниеЛиста, " ", "_")), Неопределено);
	
	ПервыйЛист = ТабДок.Области[0].Имя;
	Для Каждого ЛистДок Из ТабДок.Области Цикл
		Если ЛистДок.Верх = 1 Тогда
			ПервыйЛист = ЛистДок.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ТабДок = ТабДок.ПолучитьОбласть(?(Лист = Неопределено, ПервыйЛист, СтрЗаменить(НазваниеЛиста, " ", "_")));
	
	Если Не НомерСтроки = 1 Тогда
		ТабДок.УдалитьОбласть(ТабДок.Область("R1:R" + Строка(НомерСтроки - 1)), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	ТабДок.ВставитьОбласть(ТабДок.Область("R1"),
		ТабДок.Область("R1"),
		ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	Табдок.Область("R1").Очистить(Истина, Истина, Истина);
	
	Счетчик = 0;
	Для Каждого Колонка Из Макет Цикл
		Счетчик = Счетчик + 1;
		Если Не ЗначениеЗаполнено(Колонка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТабДок.Область("R1" + "C" + Строка(Счетчик)).Текст = Колонка.Ключ;
	КонецЦикла;
	
	ПЗ							= Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных			= Новый ОписаниеИсточникаДанных(ТабДок.Область());
	ПЗ.ДобавлениеПредставлений	= ТипДобавленияПредставлений.Добавлять;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	ТЗ = ПЗ.Результат.Выгрузить();
	
	ТЗ.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	
	КоллекцияОтборов = Новый ТаблицаЗначений;
	КоллекцияОтборов.Колонки.Добавить("ТипДанных");
	КоллекцияОтборов.Колонки.Добавить("НомерСтрокиДочерней");
	КоллекцияОтборов.Колонки.Добавить("МассивДанных");
	КоллекцияОтборов.Колонки.Добавить("НазваниеКолонки");
	
	Н = ТЗ.Количество() - 1;
	
	Пока НЕ Н < 0 Цикл
		
		Счетчик = 0;
		ТЗ[Н].ПорядковыйНомер = Н;
		
		Для каждого Колонка  Из ТЗ.Колонки Цикл
			Если Не ЗначениеЗаполнено(ТЗ[Н][Колонка.Имя]) Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Счетчик = ТЗ.Колонки.Количество() Тогда
			ТЗ.Удалить(Н);
		КонецЕсли;
		
		Н = Н - 1;
		
	КонецЦикла;
	
	ВставкаВТ					= "";
	ВставкаБазовые				= "";
	ВставкаСсылочные			= "";
	ВставкаИсточники			= "";
	ХранилищеИсточников			= Новый Соответствие;
	МассивИменСсылочных			= Новый Массив;
	СоответствиеПеречислений	= Новый Соответствие;
	
	Для Каждого Колонка Из Макет Цикл
		
		Если Не ЗначениеЗаполнено(Колонка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ВставкаВТ = ВставкаВТ + "ВходнаяТаблица." + Колонка.Ключ +  " КАК " + Колонка.Ключ + "," + Символы.ПС;
		
		Если СтрНайти(Колонка.Значение, "Ссылка") <> 0 И СтрНайти(Колонка.Значение, "Перечисление") = 0 Тогда
			
			ТЗ.Колонки.Добавить(Колонка.Ключ + "КодЧислом", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15)));
			ВставкаВТ = ВставкаВТ + "ВходнаяТаблица." + Колонка.Ключ + "КодЧислом КАК " + Колонка.Ключ + "КодЧислом," + Символы.ПС;
			МассивИменСсылочных.Добавить(Колонка.Ключ);
			
			РазбивкаТипа = СтрРазделить(СтрЗаменить(Колонка.Значение, "Ссылка", ""), ".", Ложь);
			
			ВхождениеИсточника = ХранилищеИсточников.Получить(РазбивкаТипа[1]);
			ХранилищеИсточников.Вставить(РазбивкаТипа[1], ?(ВхождениеИсточника = Неопределено, 1, ВхождениеИсточника + 1));
			Иттерация = ?(ХранилищеИсточников.Получить(РазбивкаТипа[1]) = 0, "", Строка(ХранилищеИсточников.Получить(РазбивкаТипа[1])));
			
			Если РазбивкаТипа[0] = "Документ" Тогда
				РеквизитСравнения = "Номер";
			Иначе
				РеквизитСравнения = "Наименование";
			КонецЕсли;
			
			ВставкаСсылочные = ВставкаСсылочные + РазбивкаТипа[1] + Иттерация + ".Ссылка КАК " + Колонка.Ключ + "," + Символы.ПС;
			
			Если Не СтрНайти(ВставкаИсточники, " " + РазбивкаТипа[1] + " ") > 0 Тогда
				ВставкаИсточники = ВставкаИсточники + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ " + СтрЗаменить(Колонка.Значение, "Ссылка", "") + " КАК " + РазбивкаТипа[1] + Иттерация + "
				|		ПО " + "ВходнаяТаблица." + Колонка.Ключ + " <> """" И " + "ВходнаяТаблица." + Колонка.Ключ + " <> 0" + "
				|		И (ВходнаяТаблица." + Колонка.Ключ  + " = " + РазбивкаТипа[1] + Иттерация + "." + РеквизитСравнения  + Символы.ПС;
				
				Если СтрНайти(РазбивкаТипа[1], "Номенклатура") > 0 Тогда
					ВставкаИсточники = ВставкаИсточники + " ИЛИ "
					+ "ВходнаяТаблица." + Колонка.Ключ + " = " + РазбивкаТипа[1] + Иттерация + "." + "Артикул" + Символы.ПС;
					ВставкаИсточники = ВставкаИсточники + " ИЛИ "
					+ "ВходнаяТаблица." + Колонка.Ключ + "КодЧислом = " + РазбивкаТипа[1] + Иттерация + "." + "Код" + Символы.ПС;
					ВставкаИсточники = ВставкаИсточники + " ИЛИ "
					+ "ВходнаяТаблица." + Колонка.Ключ + " = " + РазбивкаТипа[1] + Иттерация + "." + "Код" + Символы.ПС;
				ИначеЕсли СтрНайти(Колонка.Значение, "Справочник") > 0
					И Не СтрНайти(Колонка.Значение, "Организации") > 0 Тогда
					ВставкаИсточники = ВставкаИсточники + " ИЛИ "
					+ "ВходнаяТаблица." + Колонка.Ключ + "КодЧислом = " + РазбивкаТипа[1] + Иттерация + "." + "Код" + Символы.ПС;
					ВставкаИсточники = ВставкаИсточники + " ИЛИ "
					+ "ВходнаяТаблица." + Колонка.Ключ + " = " + РазбивкаТипа[1] + Иттерация + "." + "Код" + Символы.ПС;
				КонецЕсли;
				
				ВставкаБазовые		= ВставкаБазовые + "ВходнаяТаблица." + Колонка.Ключ + " КАК " + Колонка.Ключ + "Служебный," + Символы.ПС;
				ВставкаИсточники	= ВставкаИсточники + ")";
			КонецЕсли;
			
		ИначеЕсли СтрНайти(Колонка.Значение, "Перечисление") <> 0 Тогда
			КолонкаПеречисления = ТЗ.Колонки.Добавить(Колонка.Ключ + "НеОбрабатывать", Новый ОписаниеТипов(Колонка.Значение));
			СоответствиеПеречислений.Вставить(Колонка.Ключ, Колонка.Значение);
			ВставкаВТ = СтрЗаменить(ВставкаВТ, "." + Колонка.Ключ + " КАК", "." + КолонкаПеречисления.Имя + " КАК");
			ВставкаБазовые = ВставкаБазовые + "ВходнаяТаблица." + Колонка.Ключ + " КАК " + Колонка.Ключ + "," + Символы.ПС;
		ИначеЕсли Не СтрНайти(Колонка.Ключ, "НеОбрабатывать") > 0 Тогда
			ВставкаБазовые = ВставкаБазовые + "ВходнаяТаблица." + Колонка.Ключ + " КАК " + Колонка.Ключ + "," + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	ВставкаВТ		= ВставкаВТ + "ВходнаяТаблица.ПорядковыйНомер Как ПорядковыйНомер";
	ВставкаБазовые	= Лев(ВставкаБазовые, СтрДлина(ВставкаБазовые) - 2);
	ОТЧ				= Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15));
	
	Для Каждого СтрокаТаблицы Из ТЗ Цикл
		
		Для Каждого ИмяМассива Из МассивИменСсылочных Цикл
			СтрокаТаблицы[ИмяМассива + "КодЧислом"] = ОТЧ.ПривестиЗначение(СтрокаТаблицы[ИмяМассива]);
		КонецЦикла;
		
		Для Каждого Колонка Из СоответствиеПеречислений Цикл
			
			Для Каждого ТекЭлемент Из Метаданные.Перечисления[СтрЗаменить(Колонка.Значение, "ПеречислениеСсылка.", "")].ЗначенияПеречисления Цикл
				Если нРег(ТекЭлемент.Синоним) = нРег(СтрокаТаблицы[Колонка.Ключ]) Тогда
					СтрокаТаблицы[Колонка.Ключ + "НеОбрабатывать"] = Перечисления[СтрЗаменить(Колонка.Значение, "ПеречислениеСсылка.", "")][ТекЭлемент.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	#ВставкаВТ
		|ПОМЕСТИТЬ ВходнаяТаблица
		|ИЗ
		|	&ВходнаяТаблица КАК ВходнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	#ВставкаСсылочные
		|	#ВставкаБазовые
		|ИЗ
		|	ВходнаяТаблица КАК ВходнаяТаблица
		|		#ВставкаИсточники
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВходнаяТаблица.ПорядковыйНомер";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВставкаВТ", ВставкаВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВставкаСсылочные", ВставкаСсылочные);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВставкаБазовые", ВставкаБазовые);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВставкаИсточники", ВставкаИсточники);
	
	Запрос.УстановитьПараметр("ВходнаяТаблица", ТЗ);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить(), АдресПомещения);
	
КонецПроцедуры

// Функция - Поместить заглушку
//
// Параметры:
//  Макет	 - Структура - Список колонок загружаемого файла
// 
// Возвращаемое значение:
//  - Строка - Адрес файла во временном хранилище
//
Функция ПоместитьЗаглушку(Макет) Экспорт
	
	Заглушка = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из Макет Цикл
		Заглушка.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(Колонка.Значение));
	КонецЦикла;
	
	ИД = ПоместитьВоВременноеХранилище(Заглушка, Новый УникальныйИдентификатор);
	
	Возврат ИД;
	
КонецФункции

#КонецОбласти