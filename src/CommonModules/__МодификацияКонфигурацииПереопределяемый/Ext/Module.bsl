// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8, включая доработку типовых конфигураций.
//
// Copyright 2017-2024 First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
// e-mail: ivssmirnov@1bit.com
// Версия: 1.0.0.1
//
// Требования: платформа 1С версии 8.3.17 и выше

////////////////////////////////////////////////////////////////////////////////
// Формы (сервер): для серверных функций обработок форм

#Область ПрограммныйИнтерфейс

#Область СобытияФормы

// Используется для модификации форм на сервере.
//
// Параметры:
//  Форма					- Форма, из обработчика события которой происходит вызов процедуры,
//		см. справочную информацию по событиям управляемой формы.
//  Отказ					- Булево - если Истина, то объект не будет создан
//  СтандартнаяОбработка	- Булево - если Истина, то запускается стандартная обработка
//  ДополнительныеПараметры	- Произвольный - любой дополнительный параметр получаемый в форме
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетода = ПолучитьИмяМетода(Форма, "ПриСозданииНаСервере");
	
	Если ЗначениеЗаполнено(ИмяМетода) Тогда
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(Форма);
		ПараметрыМетода.Добавить(Отказ);
		ПараметрыМетода.Добавить(СтандартнаяОбработка);
		ПараметрыМетода.Добавить(ДополнительныеПараметры);
		
		__ОбщегоНазначенияСервер.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма				- Форма, из обработчика события которой происходит вызов процедуры, 
//		см. справочную информацию по событиям управляемой формы.
//	Отказ 				- Булево - если Истина, то объект не будет создан
//	ТекущийОбъект		- Объект - записываемый объект
//	ПараметрыЗаписи		- Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетода = ПолучитьИмяМетода(Форма, "ПередЗаписьюНаСервере");
	
	Если ИмяМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Форма);
	ПараметрыМетода.Добавить(Отказ);
	ПараметрыМетода.Добавить(ТекущийОбъект);
	ПараметрыМетода.Добавить(ПараметрыЗаписи);
	
	__ОбщегоНазначенияСервер.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма				- Форма, из обработчика события которой происходит вызов процедуры, 
//		см. справочную информацию по событиям управляемой формы.
//	ТекущийОбъект		- Объект - записываемый объект
//	ПараметрыЗаписи		- Структура - структура, содержащая параметры записи.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ИмяМетода = ПолучитьИмяМетода(Форма, "ПослеЗаписиНаСервере");
	
	Если ИмяМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Форма);
	ПараметрыМетода.Добавить(ТекущийОбъект);
	ПараметрыМетода.Добавить(ПараметрыЗаписи);
	
	__ОбщегоНазначенияСервер.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- Форма, из обработчика события которой происходит вызов процедуры, 
//		см. справочную информацию по событиям управляемой формы.
//	Отказ 					- Булево - если Истина, то запись выполнена не будет.
//	ПроверяемыеРеквизиты 	- Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения. 
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетода = ПолучитьИмяМетода(Форма, "ОбработкаПроверкиЗаполненияНаСервере");
	
	Если ИмяМетода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Форма);
	ПараметрыМетода.Добавить(Отказ);
	ПараметрыМетода.Добавить(ПроверяемыеРеквизиты);
	
	__ОбщегоНазначенияСервер.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
	
КонецПроцедуры

#КонецОбласти // СобытияФормы

#Область ПроцедурыИФункцииРаботыСЭлементамиФормы

// Устаревшие процедуры и функции работы с элементами формы. Следует использовать модуль __РаботаСФормами

Функция ДобавитьКомандуФормы(ИмяКомандыВход, ФормаВход, ДействиеВход = Неопределено, НаименованиеКартинки = "", ЗаголовокКомандыВход = "", ОтображениеКоманды = Неопределено) Экспорт
	
	НоваяКоманда = ФормаВход.Команды.Добавить(ИмяКомандыВход);
	Если НаименованиеКартинки <> "" Тогда
		НоваяКоманда.Картинка = БиблиотекаКартинок[НаименованиеКартинки];
	Иначе
		// Картинка не указана.
	КонецЕсли;
	НоваяКоманда.Заголовок = ЗаголовокКомандыВход;
	НоваяКоманда.Подсказка = ЗаголовокКомандыВход;
	
	Если ДействиеВход <> Неопределено Тогда
		НоваяКоманда.Действие = ДействиеВход;
	КонецЕсли;
	
	Если ОтображениеКоманды <> Неопределено Тогда
		НоваяКоманда.Отображение = ОтображениеКоманды;
	КонецЕсли;
	
	Возврат ИмяКомандыВход;
	
КонецФункции

Функция ДобавитьРеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, МассивДобавленияВход, ЗаголовокРеквизитаВход = "", ФормаВход = Неопределено) Экспорт
	
	МожноДобавлять = Истина;
	Если ФормаВход = Неопределено Тогда
		МожноДобавлять = Истина;
	Иначе
		УжеЕстьРеквизит = __ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВход, НаименованиеНовогоРеквизитаВход);
		МожноДобавлять = НЕ УжеЕстьРеквизит;
	КонецЕсли;
	Если МожноДобавлять Тогда
		НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, "", ЗаголовокРеквизитаВход);
		МассивДобавленияВход.Добавить(НовыйРеквизитФормы);
	Иначе
		// Не требуетя добавление реквизита.
	КонецЕсли;
	
	Возврат НаименованиеНовогоРеквизитаВход;
	
КонецФункции

Функция ДобавитьЭлементКоманды(ЭлементыВход, ИмяЭлементаВход, ИмяКомандыВход, ГруппаРодительВход) Экспорт
	
	НовыйЭлемент = ЭлементыВход.Добавить(ИмяЭлементаВход, Тип("КнопкаФормы"), ГруппаРодительВход);
	НовыйЭлемент.ИмяКоманды = ИмяКомандыВход;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьЭлементФормы(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход,
	НаименованиеРеквизитаВход, ТипЭлементаВход = Неопределено, ВидЭлементаВход = Неопределено, ЗаголовокВход = "", СтруктураДействий = Неопределено) Экспорт
	
	ТипЭлементаРабочий = ?(ТипЭлементаВход = Неопределено, Тип("ПолеФормы"), ТипЭлементаВход);
	ВидЭлементаРабочий = ?(ВидЭлементаВход = Неопределено, ВидПоляФормы.ПолеВвода, ВидЭлементаВход);
	
	НовыйЭлемент = ЭлементыВход.Добавить(НаименованиеЭлементаВход, ТипЭлементаРабочий, ГруппаРодительВход);
	НовыйЭлемент.ПутьКДанным	= НаименованиеРеквизитаВход;
	НовыйЭлемент.Заголовок		= ЗаголовокВход;
	Если Не ТипЭлементаРабочий = Тип("ТаблицаФормы") Тогда
		НовыйЭлемент.Вид			= ВидЭлементаРабочий;
	КонецЕсли;
	
	Если не СтруктураДействий = Неопределено Тогда
		НовыйЭлемент.УстановитьДействие(СтруктураДействий.ИмяСобытия, СтруктураДействий.Действие);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьСтраницуНаФорму(Элементы, СтраницаРодитель, НаименованиеСтраницы, Заголовок = Неопределено) Экспорт
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеСтраницы ,Тип("ГруппаФормы"), СтраницаРодитель);
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок = ?(Заголовок = Неопределено, НаименованиеСтраницы, Заголовок);
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ДобавитьЭлементТабличнойЧастиФормы(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход,
	НаименованиеРеквизитаВход, ТипЭлементаВход = Неопределено, ВидЭлементаВход = Неопределено,НаименованиеКартинкиШапки = "",НаименованиеКартинкиЗначений = "", ЗаголовокВход = "") Экспорт
	
	ТипЭлементаРабочий = ?(ТипЭлементаВход = Неопределено, Тип("ПолеФормы"), ТипЭлементаВход);
	ВидЭлементаРабочий = ?(ВидЭлементаВход = Неопределено, ВидПоляФормы.ПолеВвода, ВидЭлементаВход);
	
	НовыйЭлементТЧ = ЭлементыВход.Добавить(НаименованиеЭлементаВход, ТипЭлементаРабочий, ГруппаРодительВход); 
	НовыйЭлементТЧ.Заголовок = ЗаголовокВход; 
	НовыйЭлементТЧ.ПутьКДанным = НаименованиеРеквизитаВход; 
	НовыйЭлементТЧ.Вид = ВидЭлементаРабочий;
	
	Если НаименованиеКартинкиШапки <> "" Тогда
		НовыйЭлементТЧ.КартинкаШапки = БиблиотекаКартинок[НаименованиеКартинкиШапки];
		НовыйЭлементТЧ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		// Картинка не указана.
	КонецЕсли;
	Если НаименованиеКартинкиЗначений <> "" Тогда
		НовыйЭлементТЧ.КартинкаЗначений = БиблиотекаКартинок[НаименованиеКартинкиЗначений];
	Иначе
		// Картинка не указана.
	КонецЕсли;
	
	Возврат НовыйЭлементТЧ;
	
КонецФункции

Функция ВставитьЭлементТабличнойЧастиФормы(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход,
	НаименованиеРеквизитаВход, ТипЭлементаВход = Неопределено, ВидЭлементаВход = Неопределено,НаименованиеКартинкиШапки = "",НаименованиеКартинкиЗначений = "", ЗаголовокВход = "", ЭлементФормы) Экспорт
	
	ТипЭлементаРабочий = ?(ТипЭлементаВход = Неопределено, Тип("ПолеФормы"), ТипЭлементаВход);
	ВидЭлементаРабочий = ?(ВидЭлементаВход = Неопределено, ВидПоляФормы.ПолеВвода, ВидЭлементаВход);
	
	НовыйЭлементТЧ = ЭлементыВход.Вставить(НаименованиеЭлементаВход, ТипЭлементаРабочий, ГруппаРодительВход, ЭлементФормы);
	
	НовыйЭлементТЧ.Заголовок = ЗаголовокВход; 
	НовыйЭлементТЧ.ПутьКДанным = НаименованиеРеквизитаВход; 
	НовыйЭлементТЧ.Вид = ВидЭлементаРабочий;
	
	Если НаименованиеКартинкиШапки <> "" Тогда
		НовыйЭлементТЧ.КартинкаШапки = БиблиотекаКартинок[НаименованиеКартинкиШапки];
		НовыйЭлементТЧ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		// Картинка не указана.
	КонецЕсли;
	Если НаименованиеКартинкиЗначений <> "" Тогда
		НовыйЭлементТЧ.КартинкаЗначений = БиблиотекаКартинок[НаименованиеКартинкиЗначений];
	Иначе
		// Картинка не указана.
	КонецЕсли;
	
	Возврат НовыйЭлементТЧ;
	
КонецФункции

Функция ДобавитьЭлементТабличнойЧастиФормыСПозицией(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход,
	НаименованиеРеквизитаВход,Позиция, ТипЭлементаВход = Неопределено, ВидЭлементаВход = Неопределено,НаименованиеКартинкиШапки = "",НаименованиеКартинкиЗначений = "", ЗаголовокВход = "") Экспорт
	
	ТипЭлементаРабочий = ?(ТипЭлементаВход = Неопределено, Тип("ПолеФормы"), ТипЭлементаВход);
	ВидЭлементаРабочий = ?(ВидЭлементаВход = Неопределено, ВидПоляФормы.ПолеВвода, ВидЭлементаВход);
	
	НовыйЭлементТЧ = ЭлементыВход.Вставить(НаименованиеЭлементаВход, ТипЭлементаРабочий,ГруппаРодительВход, Позиция); 
	НовыйЭлементТЧ.Заголовок = ЗаголовокВход; 
	НовыйЭлементТЧ.ПутьКДанным = НаименованиеРеквизитаВход; 
	НовыйЭлементТЧ.Вид = ВидЭлементаРабочий;
	
	Если НаименованиеКартинкиШапки <> "" Тогда
		НовыйЭлементТЧ.КартинкаШапки = БиблиотекаКартинок[НаименованиеКартинкиШапки];
		НовыйЭлементТЧ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Иначе
		// Картинка не указана.
	КонецЕсли;
	Если НаименованиеКартинкиЗначений <> "" Тогда
		НовыйЭлементТЧ.КартинкаЗначений = БиблиотекаКартинок[НаименованиеКартинкиЗначений];
	Иначе
		// Картинка не указана.
	КонецЕсли;
	
	Возврат НовыйЭлементТЧ;
	
КонецФункции

Функция ДобавитьРеквизитТабличнойЧастиФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, МассивДобавленияВход,ТЧВход, ЗаголовокРеквизитаВход = "", ФормаВход = Неопределено, СохранаяемыеДанные = Истина) Экспорт
	
	НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, ТЧВход, ЗаголовокРеквизитаВход, СохранаяемыеДанные);
	МассивДобавленияВход.Добавить(НовыйРеквизитФормы);
	
	Возврат НаименованиеНовогоРеквизитаВход;
	
КонецФункции

Функция ДобавитьГруппуНаФорму(Элементы, ГруппаРодитель, НаименованиеГруппы, ВидГруппыВход = Неопределено,
	Заголовок = Неопределено, ВидимостьЗаголовка = Истина, ОтображениеГруппы = Неопределено) Экспорт
	
	ВидЭлементаРабочий = ?(ВидГруппыВход = Неопределено, ВидГруппыФормы.ОбычнаяГруппа, ВидГруппыВход);
	
	НовыйЭлемент = Элементы.Добавить(НаименованиеГруппы ,Тип("ГруппаФормы"), ГруппаРодитель);
	НовыйЭлемент.Вид = ВидЭлементаРабочий;
	НовыйЭлемент.Заголовок = ?(Заголовок = Неопределено, НаименованиеГруппы, Заголовок);
	
	Если ВидЭлементаРабочий = ВидГруппыФормы.ОбычнаяГруппа Тогда
		НовыйЭлемент.ОтображатьЗаголовок = ?(ВидимостьЗаголовка = Истина, Истина, Ложь);
		НовыйЭлемент.Отображение = ?(ОтображениеГруппы = Неопределено, ОтображениеОбычнойГруппы.СлабоеВыделение, ОтображениеГруппы);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ВставитьЭлементФормы(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход, 
	НаименованиеРеквизитаВход, ТипЭлементаВход = Неопределено, ВидЭлементаВход = Неопределено, ЗаголовокВход = "", ЭлементФормы) Экспорт
	
	ТипЭлементаРабочий = ?(ТипЭлементаВход = Неопределено, Тип("ПолеФормы"), ТипЭлементаВход);
	ВидЭлементаРабочий = ?(ВидЭлементаВход = Неопределено, ВидПоляФормы.ПолеВвода, ВидЭлементаВход);
	
	НовыйЭлемент = ЭлементыВход.Вставить(НаименованиеЭлементаВход, ТипЭлементаРабочий, ГруппаРодительВход, ЭлементФормы);
	НовыйЭлемент.ПутьКДанным	= НаименованиеРеквизитаВход;
	НовыйЭлемент.Заголовок		= ЗаголовокВход;
	Если Не ТипЭлементаРабочий = Тип("ТаблицаФормы") Тогда
		НовыйЭлемент.Вид			= ВидЭлементаРабочий;
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ВставитьГруппуНаФорму(Элементы, ГруппаРодитель, НаименованиеГруппы, ВидГруппыВход = Неопределено,
	Заголовок = Неопределено, ВидимостьЗаголовка = Истина, ОтображениеГруппы = Неопределено,ЭлементФормы) Экспорт
	
	ВидЭлементаРабочий = ?(ВидГруппыВход = Неопределено, ВидГруппыФормы.ОбычнаяГруппа, ВидГруппыВход);
	
	НовыйЭлемент = Элементы.Вставить(НаименованиеГруппы ,Тип("ГруппаФормы"), ГруппаРодитель,ЭлементФормы);
	НовыйЭлемент.Вид = ВидЭлементаРабочий;
	НовыйЭлемент.Заголовок = ?(Заголовок = Неопределено, НаименованиеГруппы, Заголовок);
	
	Если ВидЭлементаРабочий = ВидГруппыФормы.ОбычнаяГруппа Тогда
		НовыйЭлемент.ОтображатьЗаголовок = ?(ВидимостьЗаголовка = Истина, Истина, Ложь);
		НовыйЭлемент.Отображение = ?(ОтображениеГруппы = Неопределено, ОтображениеОбычнойГруппы.СлабоеВыделение, ОтображениеГруппы);
	КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Процедура удаляет элементы группы.
// 
// Параметры:
//  Элементы    - ВсеЭлементыФормы - все элементы формы.
//  ГруппаФормы - ГруппаФормы - группа формы родитель.
// 
Процедура УдалитьЭлементыГруппыФормы(Элементы, ГруппаФормы) Экспорт
	
	КоличествоДекораций = ГруппаФормы.ПодчиненныеЭлементы.Количество();
	Для НомерЭлемента = 1 По КоличествоДекораций Цикл
		
		ЭлементГруппы = ГруппаФормы.ПодчиненныеЭлементы[КоличествоДекораций - НомерЭлемента];
		
		НайденныйЭлемент = Элементы.Найти(ЭлементГруппы.Имя);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // ПроцедурыИФункцииРаботыСЭлементамиФормы

#Область ПроцедурыИФункцииРаботыСУсловнымОформлением

// Процедура добавляет элемент условного оформления.
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных - Условное оформление формы.
//  Представление  	   - Строка - Представление оформления.
//  СтруктураУО 	   - Структура ("СтруктураОформления, СтруктураУсловия, МассивОформляемыхПолей").
//  Позиция			   - Число (Позиция, в которую необходимо добавить оформление. 
// 							Если = Неопределено, тогда добавляется в конец).
// 
Процедура ДобавитьЭлементУсловногоОформления(УсловноеОформление, Представление,
	СтруктураУО, Позиция = Неопределено) Экспорт
	
	// Раскроем структуру УО.
	СтруктураОформления = СтруктураУО.СтруктураОформления;
	СтруктураУсловия = СтруктураУО.СтруктураУсловия;
	МассивОформляемыхПолей = СтруктураУО.МассивОформляемыхПолей;
	
	// Новый элемент условного оформления.
	Если Позиция = Неопределено Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
	Иначе	
		ЭлементУО = УсловноеОформление.Элементы.Вставить(Позиция);
	КонецЕсли;
	ЭлементУО.Представление = Представление;
	ЭлементУО.Использование = Истина;
	
	// Оформление.
	Для Каждого Оформление Из СтруктураОформления Цикл
		ЭлементУО.Оформление.УстановитьЗначениеПараметра(Оформление.Ключ, Оформление.Значение);
	КонецЦикла;
	
	// Условие.
	Если ТипЗнч(СтруктураУсловия) = Тип("Массив") Тогда
		МассивУсловий = СтруктураУсловия;
	Иначе
		МассивУсловий = Новый Массив;
		МассивУсловий.Добавить(СтруктураУсловия);
	КонецЕсли;
	
	Для Каждого Условие Из МассивУсловий Цикл
		
		УсловиеУО = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		УсловиеУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Условие.УсловиеЛевое);
		
		Если Условие.Свойство("ВидСравнения") Тогда
			// По умолчанию: ВидСравненияКомпоновкиДанных.Равно.
			УсловиеУО.ВидСравнения = Условие.ВидСравнения;
		КонецЕсли;
		
		Если Условие.Свойство("УсловиеПравое") Тогда
			УсловиеУО.ПравоеЗначение = Условие.УсловиеПравое;
		КонецЕсли;
	КонецЦикла;
	
	// Оформляемые поля.
	Для Каждого Поле Из МассивОформляемыхПолей Цикл
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет элементы условного оформления по представлению.
// 
// Параметры:
//  Представление 	   - Строка - Представление элемента.
//  УсловноеОформление - УсловноеОформлениеКомпановкиДанных - условное оформление формы.
// 
Процедура УдалитьЭлементыОформленияПоПредставлению(Представление, УсловноеОформление) Экспорт
	
	КоличествоЭлементов = УсловноеОформление.Элементы.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерЭлемента = 1 По КоличествоЭлементов Цикл
		
		СтарыйЭлемент = УсловноеОформление.Элементы.Получить(КоличествоЭлементов - НомерЭлемента);
		Если СтарыйЭлемент.Представление = Представление Тогда
			УсловноеОформление.Элементы.Удалить(СтарыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует простое условия условного оформления.
//  
// Параметры:
//	УсловиеЛевое  - Строка - Имя левого значения.
//	УсловиеПравое - Любое значение - Правое значение условия.
//	ВидСравненияУсловия (По умолчанию = Неопределено).
//
// Возвращаемое значение:
//   Структура - Структура ключей простого условного оформления.
//
Функция ПростоеУсловие(УсловиеЛевое, УсловиеПравое, ВидСравненияУсловия = Неопределено) Экспорт
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("УсловиеЛевое" , УсловиеЛевое);
	СтруктураУсловия.Вставить("УсловиеПравое", УсловиеПравое);
	Если ВидСравненияУсловия <> Неопределено Тогда
		СтруктураУсловия.Вставить("ВидСравнения", ВидСравненияУсловия);
	КонецЕсли;
	
	Возврат СтруктураУсловия;
	
КонецФункции

// Функция формирует простое условия условного оформления.
//  
// Параметры:
//	УсловиеЛевое  - Строка - Имя левого значения.
//	ВидСравненияУсловия - ВидСравненияКомпоновкиДанных - Вид сравнения условия.
//
// Возвращаемое значение:
//   Структура - Структура ключей условий на заполнение.
//
Функция УсловиеНаЗаполнение(УсловиеЛевое, ВидСравненияУсловия) Экспорт
	
	СтруктураУсловия = Новый Структура;
	СтруктураУсловия.Вставить("УсловиеЛевое", УсловиеЛевое);
	СтруктураУсловия.Вставить("ВидСравнения", ВидСравненияУсловия);
	
	Возврат СтруктураУсловия;
	
КонецФункции

#КонецОбласти // ПроцедурыИФункцииРаботыСУсловнымОформлением

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяМетода(Форма, ИмяПроцедурыВход)
	
	ИмяФормы = Форма.ИмяФормы;
	МассивПодимен = __СтроковыеФункцииСлужебныйКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивПодимен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПостфиксМодуля = МассивПодимен.Получить(0);
	
	ИмяМодуля = "__МодификацияКонфигурацииПереопределяемый" + ПостфиксМодуля;
	ИмяПроцедуры = СтрЗаменить(ИмяФормы, ".", "") + ИмяПроцедурыВход;
	ИмяМетода = ИмяМодуля + "." + ИмяПроцедуры;
	
	Возврат ИмяМетода;
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции