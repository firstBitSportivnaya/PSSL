// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

#Область ОписаниеПеременных

&НаКлиенте
Перем ДокументВнешнийОбъектИсходящий, ДокументВнешнийОбъектВходящий;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьСвойстваЭлементов();
	
	ЭтоЗагрузка = Объект.Статус = Перечисления.пбп_СтатусыИнтеграции.Загружено
		Или Объект.Статус = Перечисления.пбп_СтатусыИнтеграции.ОшибкаЗагрузки;
	Элементы.ГруппаОбъектыОбмена.Заголовок = ?(ЭтоЗагрузка, "Загруженные объекты", "Выгруженные объекты");
	
	Если Не Объект.Ошибка Тогда
		Элементы.ГруппаТекстОшибки.Видимость = Ложь;
		Элементы.Ошибка.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ФорматИнтеграции = Перечисления.пбп_ФорматыИнтеграций.XML
		Или Объект.ФорматИнтеграции = Перечисления.пбп_ФорматыИнтеграций.JSON Тогда
		Элементы.ГруппаФорматированиеТекстаЗапроса.Видимость = Истина;
		Элементы.ВидОтображенияЗапроса.Видимость = Объект.ФорматИнтеграции = Перечисления.пбп_ФорматыИнтеграций.JSON;
		Элементы.ИсходящееСообщение.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ВходящееСообщение.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		Элементы.ИсходящееСообщение.УстановитьДействие("ДокументСформирован",
			"ЗапросИсходящийДокументСформирован_Подключаемый");
		Элементы.ВходящееСообщение.УстановитьДействие("ДокументСформирован",
			"ЗапросВходящийДокументСформирован_Подключаемый");
	Иначе
		Элементы.ГруппаФорматированиеТекстаЗапроса.Видимость = Ложь;
		Если ЗначениеЗаполнено(Объект.ВходящееСообщение) Тогда
			ЗапросВходящийОтформатированный = ОтформатироватьСообщениеИнтеграции(Объект.ВходящееСообщение);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИсходящееСообщение) Тогда
			ЗапросИсходящийОтформатированный = ОтформатироватьСообщениеИнтеграции(Объект.ИсходящееСообщение);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ОбъектыИнтеграции Цикл
		Строка.ЗагруженныйОбъектТипЗначения = ТипЗнч(Строка.ОбъектИнтеграции);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Предопределенный = "Перечисление.пбп_ФорматыИнтеграций.ПроизвольныйФормат";
	Если ЗначениеЗаполнено(Объект.ФорматИнтеграции) 
		И Объект.ФорматИнтеграции <> пбп_ОбщегоНазначенияСлужебныйКлиент.ПредопределенныйЭлемент(Предопределенный) Тогда
		ИнициализироватьБазовыйФайлРедактора(ПолучитьФорматИнтеграции(Объект.ФорматИнтеграции));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтображенияЗапросаПриИзменении(Элемент)
	
	Если ВидОтображенияЗапроса Тогда
		ИнициализироватьИЗаполнитьТекстомОбъектJSON("tree");
	Иначе
		ИнициализироватьИЗаполнитьТекстомОбъектJSON("code");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросИсходящийДокументСформирован_Подключаемый(Элемент)
	
	Предопределенный = "Перечисление.пбп_ФорматыИнтеграций.JSON";
	Если Объект.ФорматИнтеграции = пбп_ОбщегоНазначенияСлужебныйКлиент.ПредопределенныйЭлемент(Предопределенный) Тогда
		ИнициализироватьИЗаполнитьТекстомОбъектJSON("code", "Исходящий");
	Иначе
		ИнициализироватьИЗаполнитьТекстомОбъектXML("Исходящий");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросВходящийДокументСформирован_Подключаемый(Элемент)
	
	Предопределенный = "Перечисление.пбп_ФорматыИнтеграций.JSON";
	Если Объект.ФорматИнтеграции = пбп_ОбщегоНазначенияСлужебныйКлиент.ПредопределенныйЭлемент(Предопределенный) Тогда
		ИнициализироватьИЗаполнитьТекстомОбъектJSON("code", "Входящий");
	Иначе
		ИнициализироватьИЗаполнитьТекстомОбъектXML("Входящий");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Предопределенный = "Перечисление.пбп_ФорматыИнтеграций.XML";
	Если Объект.ФорматИнтеграции = пбп_ОбщегоНазначенияСлужебныйКлиент.ПредопределенныйЭлемент(Предопределенный) Тогда
		Элементы.ИсходящееСообщение.Документ.defaultView.Xonomy.plusminus("xonomy1", True);
		Элементы.ВходящееСообщение.Документ.defaultView.Xonomy.plusminus("xonomy1", True);
	Иначе
		Если ВидОтображенияЗапроса Тогда
			ДокументВнешнийОбъектИсходящий.expandAll();
			ДокументВнешнийОбъектВходящий.expandAll();
		Иначе
			ДокументВнешнийОбъектИсходящий.format();
			ДокументВнешнийОбъектВходящий.format();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Предопределенный = "Перечисление.пбп_ФорматыИнтеграций.XML";
	Если Объект.ФорматИнтеграции = пбп_ОбщегоНазначенияСлужебныйКлиент.ПредопределенныйЭлемент(Предопределенный) Тогда
		Элементы.ИсходящееСообщение.Документ.defaultView.Xonomy.plusminus("xonomy1", False);
		Элементы.ВходящееСообщение.Документ.defaultView.Xonomy.plusminus("xonomy1", False);
	Иначе
		Если ВидОтображенияЗапроса Тогда
			ДокументВнешнийОбъектИсходящий.collapseAll();
			ДокументВнешнийОбъектВходящий.collapseAll();
		Иначе
			ДокументВнешнийОбъектИсходящий.compact();
			ДокументВнешнийОбъектВходящий.compact();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуферОбмена(Команда)
	
	#Если НЕ ВебКлиент Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		Если НЕ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или ТипПлатформы.Linux_x86_64 Тогда
			ОбъектКопирования = Новый COMОбъект("htmlfile");
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапросВходящий" Тогда
				ПолеКопирования = Объект.ВходящееСообщение;
			ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаЗапросИсходящий" Тогда
				ПолеКопирования = Объект.ИсходящееСообщение;
			Иначе
				Возврат;
			КонецЕсли;
			ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", ПолеКопирования);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлСообщенияОбмена(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокДиалога = НСтр("ru = 'Укажите файл внешней компоненты'");
	
	МассивРазделителей = пбп_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Объект.ИмяФайлаСообщения, ".", Истина, Истина);
	ИмяКомпоненты = МассивРазделителей[0];
	КоличествоРазделимых = 2;
	Если МассивРазделителей.Количество() = КоличествоРазделимых Тогда
		Расширение = МассивРазделителей[1];
	КонецЕсли;
	
	РежимОткрытияДиалога = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимОткрытияДиалога);
	ДиалогСохранения.ПолноеИмяФайла				= ИмяКомпоненты;
	ДиалогСохранения.Расширение					= Расширение;
	ДиалогСохранения.Заголовок					= ЗаголовокДиалога;
	ДиалогСохранения.ПредварительныйПросмотр	= Ложь;
	ДиалогСохранения.Каталог					= "";
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикВыбораКаталогаСохранениеЗавершениеПослеВыбораВДиалоге", ЭтотОбъект);
	
	ДиалогСохранения.Показать(Оповещение);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьСвойстваЭлементов()
	
	Элементы.СохранитьФайлСообщенияОбменаИсх.Заголовок = Объект.ИмяФайлаСообщения;
	Элементы.СохранитьФайлСообщенияОбменаВх.Заголовок = Объект.ИмяФайлаСообщения;
	
	Если ЗначениеЗаполнено(Объект.ИнтеграционныйПоток) Тогда
		ТипИнтеграции = пбп_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(
			Объект.ИнтеграционныйПоток, "НастройкаИнтеграции.ТипИнтеграции");
		ЭлементНаследования = Справочники.пбп_ТипыИнтеграций
			.ПолучитьПредопределенныйЭлементНаследованияНастроекТипаИнтеграции(ТипИнтеграции);
		
		ЭтоВыгрузка = НаправлениеИнтеграцииВыгружено(Объект.Статус);
		
		Если ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.Каталог
			Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.FTPРесурсы Тогда
			УстановитьСвойстваЭлементовФайловогоОбмена(ТипИнтеграции, ЭтоВыгрузка);
		ИначеЕсли ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.ПочтовыйКлиент Тогда
			Элементы.ГруппаЗапросИсходящий.Заголовок = НСтр("ru = 'Содержимое тела письма';");
			Элементы.ГруппаЗапросИсходящий.Видимость = Истина;
			Элементы.ГруппаЗапросВходящий.Видимость = Ложь;
		ИначеЕсли ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.COM
			Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.ВнешняяКомпонента Тогда
			Элементы.ГруппаЗапросИсходящий.Видимость = Ложь;
			Элементы.ГруппаЗапросВходящий.Видимость = Ложь;
		ИначеЕсли ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.КоманднаяСтрока Тогда
			Элементы.ГруппаЗапросИсходящий.Заголовок = НСтр("ru = 'Выполняемая команда';");
			Элементы.ГруппаЗапросВходящий.Заголовок = НСтр("ru = 'Результат выполнения команды';");
			Элементы.ГруппаЗапросИсходящий.Видимость = Истина;
			Элементы.ГруппаЗапросВходящий.Видимость = Истина;
		Иначе
			Элементы.ГруппаЗапросИсходящий.Заголовок = НСтр("ru = 'Запрос исходящий';");
			Элементы.ГруппаЗапросВходящий.Заголовок = НСтр("ru = 'Запрос входящий';");
			Элементы.ГруппаЗапросИсходящий.Видимость = Истина;
			Элементы.ГруппаЗапросВходящий.Видимость = Истина;
		КонецЕсли;
		
		ВывестиСсылкуНаФайлПриНеобходимости(ЭтоВыгрузка, ЭлементНаследования, ТипИнтеграции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФайловогоОбмена(ТипИнтеграции, ЭтоВыгрузка)
	
	ЗаголовокЗаписываемыйФайл = НСтр("ru = 'Содержимое записываемого файла';");
	ЗаголовокЧитаемыйФайл = НСтр("ru = 'Содержимое читаемого файла';");
	
	Если ТипИнтеграции = Справочники.пбп_ТипыИнтеграций.SFTP Тогда
		Элементы.ГруппаЗапросИсходящий.Заголовок = НСтр("ru = 'Исполняемая команда';");
		Если ЭтоВыгрузка Тогда
			Элементы.ГруппаЗапросВходящий.Заголовок = ЗаголовокЗаписываемыйФайл;
		Иначе
			Элементы.ГруппаЗапросВходящий.Заголовок = ЗаголовокЧитаемыйФайл;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЗапросИсходящий.Заголовок = ЗаголовокЗаписываемыйФайл;
		Элементы.ГруппаЗапросВходящий.Заголовок = ЗаголовокЧитаемыйФайл;
		
		Элементы.ГруппаЗапросИсходящий.Видимость = ЭтоВыгрузка;
		Элементы.ГруппаЗапросВходящий.Видимость = Не ЭтоВыгрузка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаправлениеИнтеграцииВыгружено(СтатусОбмена)
	
	Возврат СтатусОбмена = Перечисления.пбп_СтатусыИнтеграции.Выгружено
		Или СтатусОбмена = Перечисления.пбп_СтатусыИнтеграции.ОшибкаВыгрузки
		Или СтатусОбмена = Перечисления.пбп_СтатусыИнтеграции.Служебный
		Или СтатусОбмена = Перечисления.пбп_СтатусыИнтеграции.ОшибкаСлужебного;
	
КонецФункции

&НаСервере
Процедура ВывестиСсылкуНаФайлПриНеобходимости(ЭтоВыгрузка, ЭлементНаследования, ТипИнтеграции)
	
	ПоказатьСсылкуНаФайлВместоЗапроса = Не ПустаяСтрока(Объект.ИмяФайлаСообщения)
		И Не (ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.COM
		Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.ВнешняяКомпонента);
	
	Если ПоказатьСсылкуНаФайлВместоЗапроса Тогда
		Если ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.Каталог
			Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.FTPРесурсы
			Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.ПочтовыйКлиент Тогда
			Если ТипИнтеграции = Справочники.пбп_ТипыИнтеграций.SFTP Тогда
				Элементы.ГруппаДанныеСообщенияИсходящего.Видимость = Ложь;
				Элементы.ИсходящееСообщение.Видимость = Истина;
				Элементы.ГруппаДанныеСообщенияВходящего.Видимость = Истина;
				Элементы.ВходящееСообщение.Видимость = Ложь;
			Иначе
				Элементы.ГруппаДанныеСообщенияИсходящего.Видимость = ЭтоВыгрузка;
				Элементы.ИсходящееСообщение.Видимость = Не ЭтоВыгрузка;
				Элементы.ГруппаДанныеСообщенияВходящего.Видимость = Не ЭтоВыгрузка;
				Элементы.ВходящееСообщение.Видимость = ЭтоВыгрузка;
			КонецЕсли;
		ИначеЕсли ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.RESTAPI
			Или ЭлементНаследования = Справочники.пбп_ТипыИнтеграций.SOAP Тогда
			Элементы.ГруппаДанныеСообщенияИсходящего.Видимость = ЭтоВыгрузка;
			Элементы.ГруппаДанныеСообщенияВходящего.Видимость = Не ЭтоВыгрузка;
		Иначе
			Элементы.ГруппаДанныеСообщенияИсходящего.Видимость = ЭтоВыгрузка;
			Элементы.ГруппаДанныеСообщенияВходящего.Видимость = Не ЭтоВыгрузка;
			Элементы.ИсходящееСообщение.Видимость = Ложь;
			Элементы.ВходящееСообщение.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаДанныеСообщенияИсходящего.Видимость = Ложь;
		Элементы.ГруппаДанныеСообщенияВходящего.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтформатироватьСообщениеИнтеграции(Знач ТекстСообщенияИнтеграции)
	
	Если Объект.ФорматИнтеграции = Перечисления.пбп_ФорматыИнтеграций.XML
		И СтрНайти(ТекстСообщенияИнтеграции, "xml") <> 0 Тогда
		Запрос = пбп_ИнтеграцииСервер.ОтформатироватьXMLЧерезDOM(ТекстСообщенияИнтеграции, Истина);
	Иначе
		Запрос = ТекстСообщенияИнтеграции;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Процедура ИнициализироватьБазовыйФайлРедактора(ФорматИнтеграцииСтрокой)
	
	#Если ВебКлиент Тогда
		ВызватьИсключение НСтр("ru = 'Редактор " + ФорматИнтеграцииСтрокой + " не предназначен для веб-клиента'");
	#Иначе
		Если ФорматИнтеграцииСтрокой = "JSON" Тогда
			СохранитьБазовыйФайлРедактора(ФорматИнтеграцииСтрокой);
		ИначеЕсли ФорматИнтеграцииСтрокой = "XML" Тогда
			СохранитьБазовыйФайлРедактора(ФорматИнтеграцииСтрокой, "Out");
			СохранитьБазовыйФайлРедактора(ФорматИнтеграцииСтрокой, "In");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБазовыйФайлРедактора(ФорматИнтеграции, Дополнение = "")
	
	Расширение = ФорматИнтеграции + "Editor" + Дополнение;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФорматИнтеграции"	, ФорматИнтеграции);
	ДополнительныеПараметры.Вставить("Дополнение"		, Дополнение);
	
	Оповещение = Новый ОписаниеОповещения(
		"ПослеСозданияВременногоКаталогаДляБазовогоРедактора",
		ЭтотОбъект, ДополнительныеПараметры);
	пбп_ФайловаяСистемаКлиентПереадресация.СоздатьВременныйКаталог(Оповещение, Расширение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияВременногоКаталогаДляБазовогоРедактора(
	Результат, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		ДвоичныеДанные = ДвоичныеДанныеМакета(ДополнительныеПараметры.ФорматИнтеграции);
		
		Чтение = Новый ЧтениеДанных(ДвоичныеДанные);
		Файл = Новый ЧтениеZipФайла(Чтение.ИсходныйПоток());
		Файл.ИзвлечьВсе(Результат);
		
		БазовыйФайлРедактора = Результат + ПолучитьРазделительПути() + "index.html";
		
		Если ДополнительныеПараметры.ФорматИнтеграции = "JSON" Тогда
			ЗапросИсходящийОтформатированный = БазовыйФайлРедактора;
			ЗапросВходящийОтформатированный = БазовыйФайлРедактора;
		ИначеЕсли ДополнительныеПараметры.Дополнение = "Out" Тогда
			ЗапросИсходящийОтформатированный = БазовыйФайлРедактора;
		Иначе
			ЗапросВходящийОтформатированный = БазовыйФайлРедактора;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИЗаполнитьТекстомОбъектJSON(ВидОтображения, ТипЗапроса = "")
	
	Если ТипЗапроса = "Исходящий" Тогда
		Если ДокументВнешнийОбъектИсходящий <> Неопределено Тогда
			ДокументВнешнийОбъектИсходящий.destroy();
		КонецЕсли;
		
		ДокументВнешнийОбъектИсходящий = Элементы.ИсходящееСообщение.Документ.defaultView.Init(ВидОтображения);
		ДокументВнешнийОбъектИсходящий.setName("Корень"); // Установка имени верхнего уровня для дерева
		ДокументВнешнийОбъектИсходящий.setText(Объект.ИсходящееСообщение);
	
	ИначеЕсли ТипЗапроса = "Входящий" Тогда
		Если ДокументВнешнийОбъектВходящий <> Неопределено Тогда
			ДокументВнешнийОбъектВходящий.destroy();
		КонецЕсли;
		
		ДокументВнешнийОбъектВходящий = Элементы.ВходящееСообщение.Документ.defaultView.Init(ВидОтображения);
		ДокументВнешнийОбъектВходящий.setName("Корень"); // Установка имени верхнего уровня для дерева
		ДокументВнешнийОбъектВходящий.setText(Объект.ВходящееСообщение);
	Иначе
		Если ДокументВнешнийОбъектИсходящий <> Неопределено Тогда
			ДокументВнешнийОбъектИсходящий.destroy();
		КонецЕсли;
		
		ДокументВнешнийОбъектИсходящий = Элементы.ИсходящееСообщение.Документ.defaultView.Init(ВидОтображения);
		ДокументВнешнийОбъектИсходящий.setName("Корень"); // Установка имени верхнего уровня для дерева
		ДокументВнешнийОбъектИсходящий.setText(Объект.ИсходящееСообщение);
		
		Если ДокументВнешнийОбъектВходящий <> Неопределено Тогда
			ДокументВнешнийОбъектВходящий.destroy();
		КонецЕсли;
		
		Если Элементы.ВходящееСообщение.Документ <> Неопределено Тогда
			ДокументВнешнийОбъектВходящий = Элементы.ВходящееСообщение.Документ.defaultView.Init(ВидОтображения);
			ДокументВнешнийОбъектВходящий.setName("Корень"); // Установка имени верхнего уровня для дерева
			ДокументВнешнийОбъектВходящий.setText(Объект.ВходящееСообщение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьИЗаполнитьТекстомОбъектXML(ТипЗапроса)
	
	Если ТипЗапроса = "Исходящий" Тогда
		Элементы.ИсходящееСообщение.Документ.defaultView.start(
			ОтформатироватьСообщениеИнтеграции(Объект.ИсходящееСообщение), "nerd");
	Иначе
		Элементы.ВходящееСообщение.Документ.defaultView.start(
			ОтформатироватьСообщениеИнтеграции(Объект.ВходящееСообщение), "nerd");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДвоичныеДанныеМакета(Знач ФорматИнтеграцииСтрокой)
	
	Возврат ПолучитьОбщийМакет("пбп_" + ФорматИнтеграцииСтрокой + "Editor");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФорматИнтеграции(ФорматИнтеграции)
	
	ИндексЗначенияПеречисления = Перечисления.пбп_ФорматыИнтеграций.Индекс(ФорматИнтеграции);
	ФорматИнтеграцииСтрокой = Метаданные.Перечисления.пбп_ФорматыИнтеграций
		.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	
	Возврат ФорматИнтеграцииСтрокой;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикВыбораКаталогаСохранениеЗавершениеПослеВыбораВДиалоге(
	Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = Результат[0];
	
	ДвоичныеДанныеФайла = ОбработчикВыбораКаталогаСохранениеЗавершениеПослеВыбораВДиалогаНаСервере();
	ДвоичныеДанныеФайла.Записать(ПутьКФайлу);
	
КонецПроцедуры

&НаСервере
Функция ОбработчикВыбораКаталогаСохранениеЗавершениеПослеВыбораВДиалогаНаСервере()
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	Возврат РеквизитОбъект.ПолучитьДанныеФайлаСообщения();
	
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
