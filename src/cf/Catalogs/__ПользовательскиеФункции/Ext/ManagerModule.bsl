// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует список возможных типов конфигурации.
//
// Параметры:
//  СписокДобавленныхТипов - СписокЗначений - список типов, добавленных "вручную".
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция СформироватьСписокТипов(СписокДобавленныхТипов = Неопределено) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	
	Если СписокДобавленныхТипов <> Неопределено Тогда
		СписокТипов.ЗагрузитьЗначения(СписокДобавленныхТипов.ВыгрузитьЗначения());
	КонецЕсли;
	
	ОписаниеТипаВсеСсылки = пбп_СтандартныеПодсистемыПовтИсп.ОписаниеТипаВсеСсылки();
	ДоступныеТипыДанных = Новый ОписаниеТипов(ОписаниеТипаВсеСсылки, "ОписаниеТипов");
	МассивТипов = ДоступныеТипыДанных.Типы();
	
	НеПримитивныеТипы = Новый СписокЗначений;
	НеПримитивныеТипы.ЗагрузитьЗначения(МассивТипов);
	НеПримитивныеТипы.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	СписокТипов.Добавить("Число", НСтр("ru = 'Число'"));
	СписокТипов.Добавить("Строка", НСтр("ru = 'Строка'"));
	СписокТипов.Добавить("Дата", НСтр("ru = 'Дата'"));
	СписокТипов.Добавить("Булево", НСтр("ru = 'Булево'"));
	СписокТипов.Добавить("ТаблицаЗначений", НСтр("ru = 'Таблица значений'"));
	СписокТипов.Добавить("СписокЗначений", НСтр("ru = 'Список значений'"));
	СписокТипов.Добавить("Массив", НСтр("ru = 'Массив'"));
	СписокТипов.Добавить("Структура", НСтр("ru = 'Структура'"));
	
	СписокДобавленныхТипов = СписокТипов.Скопировать();
	
	Для каждого Стр Из НеПримитивныеТипы Цикл
		ЗначениеТипа 		= XMLТип(Стр.Значение).ИмяТипа;
		ПредставлениеТипа 	= Строка(Стр.Значение);
		СписокТипов.Добавить(ЗначениеТипа, ПредставлениеТипа);
	КонецЦикла;
	
	Возврат СписокТипов;
	
КонецФункции

// Фильтрует список типов для данного контекста.
//
// Параметры:
//  СписокТипов - СписокЗначений - передаваемые типы.
//  Контекст - Строка
//
Процедура ФильтрацияСпискаТипов(СписокТипов, Контекст) Экспорт
	
	Элемент = СписокТипов.НайтиПоЗначению("TypeDescription"); // Тип "Описание типов" удаляется всегда.
	СписокТипов.Удалить(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обновляет тексты предопределенных элементов справочника пользовательские функции.
//
Процедура ОбновитьПредопределенныеЭлементы(Знач Макет = Неопределено, РежимСообщений = "Все") Экспорт
	
	ВыводитьОшибки = ?(РежимСообщений = "Все" Или РежимСообщений = "Ошибки", Истина, Ложь);
	ВыводитьИнформацию = ?(РежимСообщений = "Все", Истина, Ложь);
	
	Если Макет = Неопределено Тогда
		Макет = Справочники.пбп_ПользовательскиеФункции.ПолучитьМакет("НастройкиПоУмолчанию");
	КонецЕсли;
	
	ТекстМакета = Макет.ПолучитьТекст();
	СтруктураТаблиц = Новый Структура;
	
	КоличествоТаблиц = 0;
	Пока Истина Цикл
		НомерПервойПозиции = Найти(ТекстМакета, "<Items");
		НомерПоследнейПозиции = Найти(ТекстМакета, "</Items>");
		
		Если НомерПервойПозиции = 0
			Или НомерПоследнейПозиции = 0
			Или КоличествоТаблиц > 99 Тогда
			
			Прервать;
		КонецЕсли;
		
		ТекстОписанияТаблицы = Сред(ТекстМакета, НомерПервойПозиции, НомерПоследнейПозиции+7);
		ТекстМакета = СтрЗаменить(ТекстМакета, ТекстОписанияТаблицы, "");
		
		Структура = пбп_ОбщегоНазначенияСервер.ПрочитатьXMLВТаблицу(ТекстОписанияТаблицы);
		СтруктураТаблиц.Вставить(Структура.ИмяТаблицы, Структура.Данные);
		
		КоличествоТаблиц = КоличествоТаблиц + 1;
	КонецЦикла;
	
	Ном = 0;
	// Обработка данных макета.
	Для Каждого ОписаниеЭлемента Из СтруктураТаблиц.ТаблицаПредопределенныеЭлементы Цикл
		
		Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредопределенного) Тогда
			Попытка
				СправочникСсылка = Справочники.пбп_ПользовательскиеФункции[ОписаниеЭлемента.ИмяПредопределенного];
			Исключение
				СправочникСсылка = Неопределено;
				
				Если ВыводитьОшибки Тогда
					
					пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(СтрШаблон(
						НСтр("ru='Не удалось найти предопределенный элемент справочника ""Пользовательские функции"" по имени %1';
						|en='Failed to find a predefined element of the directory ""User-defined functions"" named %1'"),
						ОписаниеЭлемента.ИмяПредопределенного));
				КонецЕсли;
				
			КонецПопытки;
		Иначе
			СправочникСсылка = Неопределено;
		КонецЕсли;
		
		Если СправочникСсылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьИнформацию Тогда
		
		пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(СтрШаблон(
			НСтр("ru='Выполнена проверка версий предопределенных элементов справочника ""Пользовательские функции"". Обновлено %1 элементов.';
			|en='Successfully checked the versions of predefined elements of the directory ""User functions"". %1 elements updated.'"),
			Строка(Ном)));
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру заголовков для элемента справочника.
//
// Параметры:
//  Ссылка				 - СправочникСсылка.пбп_ПользовательскиеФункции
//                       - Массив - Если передается группа, множественный выбор недоступен.
//  ЭтоГруппа			 - Булево - Зависит выполняемый запрос для получения данных.
//  ВыводитьТелоФункции	 - Булево - Если установлено Ложь, возможно сформировать описание функции и имя с параметрами.
// 
// Возвращаемое значение:
// Массив - коллекция параметров в виде структур,
//          гарантировано возвращает массив размером равным количеству переданных ссылок.
//  *Структура - 
//    ** Ключ - Строка - НазваниеСПараметрами, ОписаниеПараметров;
//    ** Значение - Строка - Содержит описание параметров.
//
Функция ПолучитьНазваниеПодпрограммыСПараметрами(Ссылка, ЭтоГруппа = Ложь, ВыводитьТелоФункции = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура("ЗаголовокФункции, НазваниеСПараметрами, ОписаниеПараметров");
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИменИТелФункции(ЭтоГруппа, ВыводитьТелоФункции);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЭлемент = РезультатыЗапроса[1].Выбрать();
	ВыборкаСсылка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлемент.Следующий() Цикл
		
		СтруктураПараметров = Новый Структура("ЗаголовокФункции, НазваниеСПараметрами, ОписаниеПараметров");
		
		ТипыВходПарам = Новый Массив();
		ТипыВходПарам.Добавить("// Типы входных параметров:");
		
		ЧастиИмени = Новый Массив();
		ЧастиИмени.Добавить(ВыборкаЭлемент.Представление);
		ЧастиИмени.Добавить("(");
		
		Если ВыборкаСсылка.НайтиСледующий(ВыборкаЭлемент.Ссылка, "Ссылка") Тогда
			
			ВыборкаТЧ = ВыборкаСсылка.Выбрать();
			Пока ВыборкаТЧ.Следующий() Цикл
				ТипВходПарам = СтрШаблон("// %1 - '%2'", ВыборкаТЧ.ИмяПараметра, ВыборкаТЧ.ТипПараметра);
				ТипыВходПарам.Добавить(ТипВходПарам);
				
				Параметр = СокрЛП(ВыборкаТЧ.ИмяПараметра) + ?(ВыборкаТЧ.Необязательный, " = Неопределено", "") +
					?(ВыборкаТЧ.НомерСтроки <> ВыборкаСсылка.НомерСтроки, ", ", "");
				ЧастиИмени.Добавить(Параметр);
			КонецЦикла;
			
		КонецЕсли;
		
		ТипыВходПарам.Добавить("//");
		Если ВыводитьТелоФункции Тогда
			КодПодпрограммы = ПересобратьТелоФункции(ВыборкаЭлемент.КодПодпрограммы);
			ТипыВходПарам.Добавить(КодПодпрограммы);
		КонецЕсли;
		ТекстКомментария = СтрСоединить(ТипыВходПарам, Символы.ПС);
		
		ЧастиИмени.Добавить(")");
		ТекстНазвания = СтрСоединить(ЧастиИмени, "");
		
		СтруктураПараметров.НазваниеСПараметрами = ТекстНазвания;
		СтруктураПараметров.ОписаниеПараметров = ТекстКомментария;
		
		Результат.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует строку, содержащую описание функций.
//
// Параметры:
//  Ссылка				 - СправочникСсылка.пбп_ПользовательскиеФункции
//                       - Массив - Если передается группа, множественный выбор недоступен.
//  ЭтоГруппа			 - Булево - Зависит выполняемый запрос для получения данных.
//  ВыводитьТелоФункции	 - Булево - Если установлено Ложь, возможно сформировать описание функции и имя с параметрами.
// 
// Возвращаемое значение:
// Строка - Сформированное описание Функций, с выводом имени функции, ее параметров и описание типов параметров
//
Функция СформироватьОписаниеФункций(Ссылка, ЭтоГруппа = Ложь, ВыводитьТелоФункции = Ложь) Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(СтрШаблон(НСтр("ru='#В группе: %1';en='#In Group: %1'"), Ссылка));
	Результат.Добавить(Символы.ВК);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИменИТелФункции(ЭтоГруппа, ВыводитьТелоФункции);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЭлемент = РезультатыЗапроса[1].Выбрать();
	ВыборкаСсылка = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлемент.Следующий() Цикл
		
		Если ВыборкаЭлемент.ЭтоГруппа Тогда
			Результат.Добавить(СтрШаблон("Группа: %1", ВыборкаЭлемент.Представление));
			Результат.Добавить(Символы.ВК);
			Продолжить;
		КонецЕсли;
		
		ТипыВходПарам = Новый Массив();
		ЧастиИмени = Новый Массив();
		
		ТипыВходПарам.Добавить("// Типы входных параметров:");
		
		ЧастиИмени.Добавить(СтрШаблон("Функция %1(", ВыборкаЭлемент.Представление));
		
		Если ВыборкаСсылка.НайтиСледующий(ВыборкаЭлемент.Ссылка, "Ссылка") Тогда
			
			ВыборкаТЧ = ВыборкаСсылка.Выбрать();
			Пока ВыборкаТЧ.Следующий() Цикл
				ТипВходПарам = СтрШаблон("// %1 - '%2'", ВыборкаТЧ.ИмяПараметра, ВыборкаТЧ.ТипПараметра);
				ТипыВходПарам.Добавить(ТипВходПарам);
				
				Параметр = СокрЛП(ВыборкаТЧ.ИмяПараметра) + ?(ВыборкаТЧ.Необязательный, " = Неопределено", "") +
					?(ВыборкаТЧ.НомерСтроки = ВыборкаСсылка.НомерСтроки, "", ", ");
				ЧастиИмени.Добавить(Параметр);
				
			КонецЦикла;
		КонецЕсли;
		ЧастиИмени.Добавить(")");
		ТипыВходПарам.Добавить("//");
		
		ИмяПараметрыФункции = СтрСоединить(ЧастиИмени, "");
		
		ТипыВходПарам.Добавить(ИмяПараметрыФункции);
		ОсновнойТекст = СтрСоединить(ТипыВходПарам, Символы.ПС);
		Результат.Добавить(ОсновнойТекст);
		
		Если ВыводитьТелоФункции Тогда
			КодПодпрограммы = ПересобратьТелоФункции(ВыборкаЭлемент.КодПодпрограммы);
			Результат.Добавить(КодПодпрограммы);
		КонецЕсли;
		
		Результат.Добавить(Символы.ВК);
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

Функция ТекстЗапросаИменИТелФункции(ЭтоГруппа = Ложь, ВыводитьТелоФункции = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	пбп_ПользовательскиеФункции.Ссылка КАК Ссылка,
		|	пбп_ПользовательскиеФункции.Представление КАК Представление,
		|	пбп_ПользовательскиеФункции.ЭтоГруппа КАК ЭтоГруппа
		|ПОМЕСТИТЬ ДанныеЭлемента
		|ИЗ
		|	Справочник.пбп_ПользовательскиеФункции КАК пбп_ПользовательскиеФункции
		|ГДЕ
		|	пбп_ПользовательскиеФункции.Ссылка В (&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЭлемента.Ссылка КАК Ссылка,
		|	ДанныеЭлемента.Представление КАК Представление,
		|	ДанныеЭлемента.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	ДанныеЭлемента КАК ДанныеЭлемента
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПараметров.Ссылка КАК Ссылка,
		|	ТаблицаПараметров.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПараметров.Наименование КАК ИмяПараметра,
		|	ТаблицаПараметров.Необязательный КАК Необязательный,
		|	ТаблицаПараметров.Тип КАК ТипПараметра
		|ИЗ
		|	ДанныеЭлемента КАК ДанныеЭлемента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.пбп_ПользовательскиеФункции.ПараметрыФункции КАК ТаблицаПараметров
		|		ПО ДанныеЭлемента.Ссылка = ТаблицаПараметров.Ссылка
		|ИТОГИ
		|	МАКСИМУМ(НомерСтроки)
		|ПО
		|	Ссылка";
	
	Если ЭтоГруппа Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		Пакет = пбп_СхемыЗапросов.ЗапросПакетаЗапросов(СхемаЗапроса, 0);
		Пакет.Операторы[0].Отбор.Установить(0, Новый ВыражениеСхемыЗапроса("пбп_ПользовательскиеФункции.Родитель = &Ссылка"));
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Если ВыводитьТелоФункции Тогда
		ТекстЗапроса = пбп_СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ТекстЗапроса,
			"пбп_ПользовательскиеФункции.КодПодпрограммы",
			"КодПодпрограммы",
			0);
		ТекстЗапроса = пбп_СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ТекстЗапроса,
			"ДанныеЭлемента.КодПодпрограммы",
			"КодПодпрограммы",
			1);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет параметры функции для переданного объекта.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура, СправочникОбъект.пбп_ПользовательскиеФункции.
//
Процедура ЗаполнитьПараметры(Объект) Экспорт
	
	Объект.ПараметрыФункции.Очистить();
	
	Если Объект.Контекст = Перечисления.пбп_КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель Тогда
		ДобавитьПараметрыЗагрузкаЭксель(Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет добавляет параметр при отсутствии.
//
// Параметры:
//  Объект		 - СправочникОбъект.пбп_ПользовательскиеФункции - Изменяемый объект.
//  ИмяПараметра - Строка - Имя добавляемого параметра.
//  ТипПараметра - Строка - Подставляемый тип в строковом, по умолчанию остается пустой.
//
Процедура НайтиДобавитьПараметр(Объект, ИмяПараметра, ТипПараметра = Неопределено)
	
	ТипСтрокой = ТипСтрокой(ТипПараметра);
	
	ДанныеПоиска = Объект.ПараметрыФункции.НайтиСтроки(
		Новый Структура("Наименование", ИмяПараметра));
	
	Если Не ЗначениеЗаполнено(ДанныеПоиска) Тогда
		НоваяСтрока = Объект.ПараметрыФункции.Добавить();
		НоваяСтрока.Наименование = ИмяПараметра;
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		НоваяСтрока.Тип = ТипСтрокой;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипСтрокой(Тип)
	
	Если Тип = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	СформироватьСписокТипов(СписокДобавленныхТипов);
	
	ТипСтрокой = Строка(Тип);
	
	ТипНайден = Ложь;
	Для Каждого ЭлементСписка Из СписокДобавленныхТипов Цикл
		Если ЭлементСписка.Представление = ТипСтрокой Тогда
			ТипНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипНайден Тогда
		ТипСтрокой = XMLТип(Тип).ИмяТипа;
	КонецЕсли;
	
	Возврат ТипСтрокой;
	
КонецФункции

// Добавляет параметры, необходимые для контекста ЗагрузкаЭксель.
//
// Параметры:
//  Объект		 - СправочникОбъект.пбп_ПользовательскиеФункции - Изменяемый объект.
//
Процедура ДобавитьПараметрыЗагрузкаЭксель(Объект)
	
	ТипСтруктура = Тип("Структура");
	ТипСтрока = Тип("Строка");
	НайтиДобавитьПараметр(Объект, "СтрокаЗагрузки");
	НайтиДобавитьПараметр(Объект, "ДанныеЗагрузки", ТипСтруктура);
	НайтиДобавитьПараметр(Объект, "СтрокаПравил", ТипСтрока);
	
КонецПроцедуры

Функция ПересобратьТелоФункции(ТелоФункции)
	
	РазобранныйКод = СтрРазделить(ТелоФункции, Символы.ПС, Ложь);
	Части = Новый Массив();
	Для Сч = 0 По РазобранныйКод.ВГраница() Цикл
		Если ЗначениеЗаполнено(РазобранныйКод[Сч]) Тогда
			Части.Добавить(РазобранныйКод[Сч]);
		КонецЕсли;
	КонецЦикла;
	Возврат СтрСоединить(Части, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецЕсли
