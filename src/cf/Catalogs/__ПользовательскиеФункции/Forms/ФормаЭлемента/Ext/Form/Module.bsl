// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

#Область ОписаниеПеременных

#КонецОбласти

#Область ОписаниеПеременных

&НаКлиенте
Перем мПредИмя; // Хранит имя переменной до его изменения

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьТипыИЗначенияПараметров(ТекущийОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение параметров
	Если Параметры.Ключ.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ПараметрыФункции") Тогда
				СправочникОбъект = РеквизитФормыВЗначение("Объект");
				Для Каждого ТекущийПараметр Из Параметры.ЗначенияЗаполнения.ПараметрыФункции Цикл
					НовыйПараметр = СправочникОбъект.ПараметрыФункции.Добавить();
					НовыйПараметр.Наименование = ТекущийПараметр.Ключ;
					ЗаполнитьЗначенияСвойств(НовыйПараметр, ТекущийПараметр.Значение);
				КонецЦикла;
				
				ЗначениеВДанныеФормы(СправочникОбъект, Объект);
				ПрочитатьТипыИЗначенияПараметров(СправочникОбъект);
			Иначе
				ДобавитьПараметры();
			КонецЕсли;
		Иначе
			ДобавитьПараметры();
		КонецЕсли;
	КонецЕсли;
	
	// Получение каталога исходного кода конфигурации
	Каталог = ПолучитьКаталогИсходногоКодаКонфигурации();
	Если ЗначениеЗаполнено(Каталог) Тогда
		КаталогИсходногоКодаКонфигурации = Каталог;
	КонецЕсли;
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер(Истина);
	
	УправлениеЭлементамиФормы();
	
	АдресМакета = ПоместитьВоВременноеХранилище(ПолучитьОбщийМакет("__BSLEditor"), Новый УникальныйИдентификатор());
	
	КоллекцияОбщихМодулей = ПолучитьКоллекциюОбщихМодулей();
	АдресОбщихМодулей = СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей);
	ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей);
	
	БыстрыеПодсказки = Истина;
	ВидимостьКартыКода = Истина;
	ПодсвечиватьЗапросы = Истина;
	
	СписокТипов = Справочники.__ПользовательскиеФункции.СформироватьСписокТипов();
	Справочники.__ПользовательскиеФункции.ФильтрацияСпискаТипов(СписокТипов, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	ОпределитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьИсполняемыйКод();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьТипыИЗначенияПараметров(ТекущийОбъект, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКодаКонфигурации();
	
	Если ЗначениеЗаполнено(КаталогИсходногоКодаКонфигурации) 
		И КаталогИсходногоКода <> КаталогИсходногоКодаКонфигурации Тогда
		СохранитьКаталогИсходногоКодаКонфигурации(КаталогИсходногоКодаКонфигурации);	
	КонецЕсли;
	
	СохранитьПараметрыФункции(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеДанныхИзВременногоХранилища();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.__ПользовательскиеФункции.Форма.ФормаТаблицыЗначений" 
		Или ИсточникВыбора.ИмяФормы = "Справочник.__ПользовательскиеФункции.Форма.ФормаСтруктуры"
		Или ИсточникВыбора.ИмяФормы = "Справочник.__ПользовательскиеФункции.Форма.ФормаМассива" Тогда
		текДанные = Элементы.ПараметрыФункции.ТекущиеДанные;
		текДанные.АдресЗначения = ВыбранноеЗначение.Адрес;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.__ФормаВыбораПоля" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Модифицированность = Истина;
			View().selectedText(ВыбранноеЗначение.Поле);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.__ПользовательскиеФункции.Форма.УсловныйОператор" Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Модифицированность = Истина;
			View().selectedText(ВыбранноеЗначение.Поле);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтекстПриИзменении(Элемент)
	
	КонтекстПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура КаталогИсходногоКодаКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.МножественныйВыбор = Ложь;
	
	Результат = Ждать Диалог.ВыбратьАсинх();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина; 
	КаталогИсходногоКодаКонфигурации = Результат[0];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыФункции

&НаКлиенте
Процедура ПараметрыФункцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПараметрыФункции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.Наименование = СтрШаблон("П%1", Строка(ТекущиеДанные.НомерСтроки));
		ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыФункцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыФункцииПослеУдаления(Элемент)
	
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПараметрыФункцииТипВФормеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаголовокЭлемента = НСтр("ru = 'Редактирование типа данных'");
	
	ВыбранныйЭлемент = Ждать СписокТипов.ВыбратьЭлементАсинх(ЗаголовокЭлемента);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыФункции.ТекущиеДанные;
	
	Если ВыбранныйЭлемент.Значение = "ТаблицаЗначений"
		Или ВыбранныйЭлемент.Значение = "Массив"
		Или ВыбранныйЭлемент.Значение = "Структура" Тогда
		
		ТекДанные.Тип = ВыбранныйЭлемент.Значение;
		ТекДанные.ТипВФорме = ВыбранныйЭлемент.Представление;
		// Доработать, отражение количество элементов в коллекции, условное оформление - цвет текста, запрет изменения
		ТекДанные.ЗначениеВФорме = ВыбранныйЭлемент.Представление;
		ТекДанные.АдресЗначения = СоздатьКоллекциюИПоместитьВХранилище(ВыбранныйЭлемент.Значение);
	Иначе
		ИнициализацияТипаИЗначенияПараметра(ТекДанные, ВыбранныйЭлемент);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыФункцииЗначениеВФормеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПараметрыФункции.ТекущиеДанные;
	Тип = ТекДанные.Тип;
	
	Если Тип = "ТаблицаЗначений" Тогда
		Путь = КлючОбъекта("ФормаТаблицыЗначений");
	ИначеЕсли Тип = "Структура" Тогда
		Путь = КлючОбъекта("ФормаСтруктуры");
	ИначеЕсли Тип = "Массив" Тогда
		Путь = КлючОбъекта("ФормаМассива");
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(текДанные.АдресЗначения) Тогда
		ПараметрыФормы.Вставить("АдресЗначения", текДанные.АдресЗначения);
	КонецЕсли;
	
	ОткрытьФорму(Путь, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПеременные

&НаКлиенте
Процедура ПеременныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Переменные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПредИмя = ТекущиеДанные.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеременныеИмяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Переменные.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(мПредИмя) И Не ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеременныеИмяПриИзмененииЗавершение", ЭтотОбъект, ТекущиеДанные),
			СтрШаблон(НСтр("ru='Выполнить замену в коде имени ""%1"" на имя ""%2""?';
				|en='Change name code ""%1"" for ""%2""?'"), мПредИмя, ТекущиеДанные.Имя),
			РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	Иначе
		мПредИмя = ТекущиеДанные.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ПеременныеИмяПриИзмененииЗавершение".
// 
// Параметры:
// Ответ - КодВозвратаДиалога.
// ТекущиеДанные - Текущие данные таблицы "Переменные".
// 
&НаКлиенте
Процедура ПеременныеИмяПриИзмененииЗавершение(Ответ, ТекущиеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.КодПодпрограммы = СтрЗаменить(Объект.КодПодпрограммы,
			СтрШаблон(".%1", мПредИмя), СтрШаблон(".%1", ТекущиеДанные.Имя));
	КонецЕсли;
	
	мПредИмя = ТекущиеДанные.Имя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиУсловноеВыражение(Команда)
	
	ОткрытьКонструкторУсловногоВыражения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПоле(Команда)
	
	ОткрытьФормуВыбораПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьЗапрос(Команда)
	
	ВызватьКонструкторЗапроса(View().getQuery());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)
	
	ОбновитьИсполняемыйКод();
	ВыполнитьКодСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КартаКода(Команда)
	
	ВидимостьКартыКода = Не ВидимостьКартыКода;
	View().minimap(ВидимостьКартыКода);
	УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСостояния(Команда)
	
	ВидимостьСтрокиСостояния = Не ВидимостьСтрокиСостояния;
	
	Если ВидимостьСтрокиСостояния Тогда
		View().showStatusBar();
	Иначе
		View().hideStatusBar();
	КонецЕсли;
	
	УправлениеВидимостьюСтрокиСостояния();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсвечиватьЗапросы(Команда)
	
	ПодсвечиватьЗапросы = Не ПодсвечиватьЗапросы;
	ИмяТемы = ПолучитьИмяТемы() + ?(ПодсвечиватьЗапросы, "-query", "");
	ПереключитьТему(ИмяТемы);
	
	УправлениеВидимостьюПодсветкиЗапросов();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ТолькоПросмотр = Объект.Предопределенный;
	
	Элементы.ГруппаКоманднаяПанель.Доступность = Не Объект.Предопределенный;
	
	флКонтекстЗагрузкаЭксель = ?(Объект.Контекст = Перечисления.__КонтекстыВыполненияПользовательскихФункций.ЗагрузкаЭксель,
		Истина, Ложь);
	
	// При загрузке из Эксель контекст зависит от того в каком правиле пытаемся выполнить загрузку,
	// в общем случае проверка невозможна.
	Элементы.ВыполнитьКод.Доступность = Не флКонтекстЗагрузкаЭксель;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметры()
	
	Справочники.__ПользовательскиеФункции.ЗаполнитьПараметры(Объект);
	ПрочитатьТипыИЗначенияПараметров(Объект);
	ПолучитьНазваниеПодпрограммыСПараметрамиСервер(Истина);
	
КонецПроцедуры // ДобавитьПараметры()

&НаСервере
Процедура ПолучитьНазваниеПодпрограммыСПараметрамиСервер(ПараметрыИзменены = Ложь)
	
	Если Не ПараметрыИзменены Тогда
		Позиция = СтрНайти(НазваниеПодпрограммы, "(");
		НазваниеПодпрограммы = Объект.Наименование + ?(Позиция > 0, Сред(НазваниеПодпрограммы, Позиция), "()");
		Возврат;
	КонецЕсли;
	
	ЧастиИмени = Новый Массив();
	
	ЧастиИмени.Добавить(Объект.Наименование);
	ЧастиИмени.Добавить("(");
	Предел = Объект.ПараметрыФункции.Количество();
	Для Каждого СтрПараметр Из Объект.ПараметрыФункции Цикл
		Параметр = СокрЛП(СтрПараметр.Наименование) +
			?(СтрПараметр.Необязательный, " = Неопределено", "") +
			?(СтрПараметр.НомерСтроки <> Предел, ", ", "");
		ЧастиИмени.Добавить(Параметр);
	КонецЦикла;
	ЧастиИмени.Добавить(")");
	
	НазваниеПодпрограммы = СтрСоединить(ЧастиИмени, "");
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТипыИЗначенияПараметров(СпрОбъект, ПрочитатьЗначения = Ложь)
	
	Если ПрочитатьЗначения Тогда
		НастройкиПараметров = ПолучитьПараметрыФункции();
	КонецЕсли;
	
	Для Каждого ТекущийПараметр Из СпрОбъект.ПараметрыФункции Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Идентификатор", ТекущийПараметр.Идентификатор);
		АктивныеСтроки = Объект.ПараметрыФункции.НайтиСтроки(СтруктураОтбора);
		
		Если ЗначениеЗаполнено(АктивныеСтроки) И ЗначениеЗаполнено(ТекущийПараметр.Тип) Тогда
			Представление = Строка(Тип(ТекущийПараметр.Тип));
			АктивныеСтроки[0].ТипВФорме = Представление;
			// Доработать, отражение количество элементов в коллекции, условное оформление - цвет текста, запрет изменения
			НастройкаПараметра = Неопределено;
			Если ПрочитатьЗначения Тогда
				НастройкаПараметра = НастройкиПараметров.Получить(ТекущийПараметр.Идентификатор);
			КонецЕсли;
			ЗначениеПараметраФункции(АктивныеСтроки[0], НастройкаПараметра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗначениеПараметраФункции(СтрокаТаблицы, Настройка)
	
	Если СтрокаТаблицы.Тип = "ТаблицаЗначений"
		Или СтрокаТаблицы.Тип = "Структура"
		Или СтрокаТаблицы.Тип = "Массив" Тогда
		Если Настройка <> Неопределено И ТипЗнч(Настройка.Значение) <> Тип("Строка") Тогда
			СтрокаТаблицы.АдресЗначения = ПоместитьВоВременноеХранилище(Настройка.Значение, Новый УникальныйИдентификатор);
		КонецЕсли;
		СтрокаТаблицы.ЗначениеВФорме = СтрокаТаблицы.ТипВФорме;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Тип(СтрокаТаблицы.Тип));
		Описание = Новый ОписаниеТипов(Массив);
		Значение = Описание.ПривестиЗначение(Тип(СтрокаТаблицы.Тип));
		СтрокаТаблицы.ЗначениеВФорме = ?(Настройка <> Неопределено, Настройка.Значение, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодСервер()
	
	ЗначенияПараметровФункции = ПолучитьПараметрыФункции();
	
	ПараметрыФункции = Новый Структура;
	Для Каждого Стр Из Объект.ПараметрыФункции Цикл
		СтрокаПараметра = ЗначенияПараметровФункции.Получить(Стр.Идентификатор);
		Значение = ?(СтрокаПараметра = Неопределено, Неопределено, СтрокаПараметра.Значение);
		ПараметрыФункции.Вставить(Стр.Наименование, Значение);
	КонецЦикла;
	
	Попытка
		Результат = __ОбщегоНазначенияСервер.ВыполнитьПользовательскуюФункциюСПараметрами(Объект.Ссылка, ПараметрыФункции);
		__ОбщегоНазначенияСлужебный.СообщитьПользователю(Строка(Результат));
	Исключение
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при выполнении функции по причине: %1'; 
			|en = 'Error when executing the function due to: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действия при изменении контекста выполнения функции.
&НаСервере
Процедура КонтекстПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	ДобавитьПараметры();
	
КонецПроцедуры

// Открывает помошник для выбора поля.
// 
&НаКлиенте
Процедура ОткрытьФормуВыбораПоля()
	
	ПараметрыФормы = Новый Структура;
	
	ДополнитьПараметрыОткрытияФормы(ПараметрыФормы);
	
	ОткрытьФорму("ОбщаяФорма.__ФормаВыбораПоля", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры // ОткрытьФормуВыбораПоля()

&НаКлиенте
Процедура ОткрытьКонструкторУсловногоВыражения()

	ПараметрыФормы = Новый Структура;
	
	ДополнитьПараметрыОткрытияФормы(ПараметрыФормы);
	
	ОткрытьФорму(КлючОбъекта("УсловныйОператор"), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогИсходногоКодаКонфигурации()
	
	КлючНастроек = КлючНастроек("КаталогИсхКода");
	Результат = __ОбщегоНазначенияСлужебный.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта(),
		КлючНастроек, "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьКаталогИсходногоКодаКонфигурации(Каталог)
	
	КлючНастроек = КлючНастроек("КаталогИсхКода");
	__ОбщегоНазначенияСлужебный.ХранилищеОбщихНастроекСохранить(КлючОбъекта(),
		КлючНастроек, Каталог);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючОбъекта(Знач ИмяФормы = "ФормаЭлемента")
	Возврат "Справочник.__ПользовательскиеФункции.Форма." + ИмяФормы;
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыОткрытияФормы(ПараметрыОткрытия)
	
	ЗначенияЗаполнения = Новый Структура;
	
	МассивИменПеременных = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Переменные Цикл
		МассивИменПеременных.Добавить(ТекСтрока.Имя);
	КонецЦикла;
	ЗначенияЗаполнения.Вставить("Переменные", МассивИменПеременных);
	
	МассивИменПараметров = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ПараметрыФункции Цикл
		МассивИменПараметров.Добавить(ТекСтрока.Наименование);
	КонецЦикла;
	ЗначенияЗаполнения.Вставить("Параметры", МассивИменПараметров);
	
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
КонецПроцедуры

#Область ОбработчикиСобытийПоляРедактора

&НаКлиенте
Процедура ОбновитьИсполняемыйКод()
	
	Объект.КодПодпрограммы = ПолучитьТекст();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИсполняемыйКод()
	
	ОчиститьТекст();
	УстановитьТекст(Объект.КодПодпрограммы, Неопределено, Ложь);
	View().setOriginalText(Объект.КодПодпрограммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnReady(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		
		#Если ВебКлиент Тогда
			Если ВебДокументДоступен() Тогда
				ИнициализацияРедактора();
				АктивироватьДополнительныеФункции();
			Иначе
				ПоказатьПредупреждение(, "К сожалению, в веб-клиенте недоступны практически все функции.
				|Вы можете посмотреть только работу автодополнения и подсказок параметров при наборе кода.");
			КонецЕсли;
		#Иначе
			ИнициализацияРедактора();
			АктивироватьДополнительныеФункции();
		#КонецЕсли
		
		УстановитьИсполняемыйКод();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеРедактора(Событие)
	
	Если Событие <> Неопределено Тогда
			
		Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
			ВызватьКонструкторЗапроса(Событие.params);
		КонецЕсли;
		
		Если Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
			ВызватьКонструкторФорматнойСтроки(Событие.params);
		КонецЕсли;
		
		Если Событие.event = "EVENT_GET_METADATA" Тогда
			ОбработкаСобытияПолученияМетаданных(Событие);
		КонецЕсли;
		
		Если Событие.event = "EVENT_CONTENT_CHANGED" Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ConsoleOnClick(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если Не ТолькоПросмотр Тогда
		ОбработатьСобытиеРедактора(ДанныеСобытия.Event.eventData1C);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияРедактора

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
	
КонецФункции

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(__ОбщегоНазначенияВызовСервера.ТекущаяДатаПользователя());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		НачатьКопированиеФайла(
			Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект), ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект), ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект), КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		НачатьКопированиеФайла(
			Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтотОбъект), ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(
			Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтотОбъект));
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(
			Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтотОбъект));
	Иначе		
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(
		Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	НачатьСозданиеКаталога(
		Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект), КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	#Если ВебКлиент Тогда
		HTML = "https://salexdv.github.io/bsl_console/src/index.html";
		ИсходникиЗагружены = Истина;
	#Иначе
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияРасширенияДляРаботыСФайлами(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		ИзвлечьИсходники();
	Иначе
		
		#Если ВебКлиент Тогда
			Если ДопПараметры = Неопределено Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеУстановкиРасширенияДляРаботыСФайлами", ЭтотОбъект);
				НачатьУстановкуРасширенияРаботыСФайлами(Оповещение);
			Иначе
				ПоказатьПредупреждение(, "К сожалению работа в веб-клиенте невозможна!");
			КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширенияДляРаботыСФайлами(ДопПараметры) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами(
		Новый ОписаниеОповещения("ПослеПодключенияРасширенияДляРаботыСФайлами", ЭтотОбъект, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	Элементы.КартаКода.Доступность = Истина;
	Элементы.СтрокаСостояния.Доступность = Истина;
	
	УправлениеВидимостьюКартыКода();
	УправлениеВидимостьюСтрокиСостояния();
	УправлениеВидимостьюПодсветкиЗапросов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьМетаданные() Экспорт
	
	View().clearMetadata();
	ОбновитьСписокОбщихМодулей();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	
	View().init(Инфо.ВерсияПриложения);
	View().setOption("autoResizeEditorLayout", Истина);
	View().setOption("renderQueryDelimiters", Истина);
	View().hideScrollX();
	View().hideScrollY();
	View().enableModificationEvent(Истина);
	
	ПодключитьОбработчикОжидания("ОбнулитьМетаданные", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсРедактора

&НаКлиенте
Функция View()
	
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекст(Текст, Позиция, УчитыватьОтступПервойСтроки)
	
	View().setText(Текст, Позиция, УчитыватьОтступПервойСтроки);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекст()
	
	Возврат View().getText();
	
КонецФункции

&НаКлиенте
Функция ОчиститьТекст()
	
	Возврат View().eraseText();
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаОбщихМодулейКлиент

&НаСервере
Функция СохранитьОбщиеМодулиВХранилище(КоллекцияОбщихМодулей)
	
	Файл = Новый ЗаписьJSON();
	Файл.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Файл, КоллекцияОбщихМодулей.Общие);
	Исключение
		ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ЗначениеКоллекции = Файл.Закрыть();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеКоллекции, Новый УникальныйИдентификатор());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаОбщихМодулей(КоллекцияОбщихМодулей)
	
	// Соответствие между именем общего неглобального модуля в нижнем регистре
	// и именем модуля, как оно задано в конфигураторе для правильной загрузки
	// текстов общих модулей
	ОбщиеМодули = Новый Соответствие();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Общие Цикл
		ОбщиеМодули.Вставить(НРег(Обход.Ключ), Обход.Ключ);
	КонецЦикла;
	
	ИменаОбщихМодулей = Новый ФиксированноеСоответствие(ОбщиеМодули);
	
	// Именя глобальных модулей для загрузки текстов
	Модули = Новый Массив();
	
	Для Каждого Обход Из КоллекцияОбщихМодулей.Глобальные Цикл
		Модули.Добавить(Обход.Ключ);
	КонецЦикла;
	
	ГлобальныйМодули = Новый ФиксированныйМассив(Модули);
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ПолучитьМодульИзИсходников(ПолноеИмяФайла)
	
	СмещениеИмениВПути = 3;
	
	Путь = СтрРазделить(ПолноеИмяФайла, РазделительПути, Ложь);
	ИмяМодуля = Путь[Путь.Количество() - СмещениеИмениВПути];
	
	Текст = Новый ТекстовыйДокумент();
	Ждать Текст.ПрочитатьАсинх(ПолноеИмяФайла);
	ТекстМодуля = Текст.ПолучитьТекст();
	
	Возврат Новый Структура("Имя, Текст", ИмяМодуля, ТекстМодуля);
	
КонецФункции

&НаКлиенте
Функция НормализоватьПуть(Путь)
	
	Путь = СокрЛП(Путь);
	
	Если Прав(Путь, 1) <> РазделительПути Тогда
		Путь = Путь + РазделительПути;
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКаталогИсходногоКода()
	
	КаталогИсходногоКода = КаталогИсходногоКодаКонфигурации;
	Если ЗначениеЗаполнено(КаталогИсходногоКода) Тогда
		КаталогИсходногоКода = НормализоватьПуть(КаталогИсходногоКода);
	КонецЕсли;
	
	Возврат КаталогИсходногоКода;
	
КонецФункции

&НаКлиенте
Асинх Процедура ВопросЗагрузкиОбщихМодулейЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Загрузка общих модулей...");
		Файлы = Ждать НайтиФайлыАсинх(ДопПараметры.КаталогМодулей, "Ext" + РазделительПути + "*.bsl", Истина);
		
		Для Каждого Файл Из Файлы Цикл
			ОбщийМодуль = ПолучитьМодульИзИсходников(Файл.ПолноеИмя);
			View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст);
		КонецЦикла;
		
		Состояние("Общие модули загружены");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Глобальный)
	
	ЗагруженоФункций = 0;
	
	ИмяВКонфигураторе = ИменаОбщихМодулей.Получить(НРег(ИмяМодуля));
	
	Если ИмяВКонфигураторе = Неопределено Тогда
		ИмяВКонфигураторе = ИмяМодуля;
	КонецЕсли;
	
	ФайлМодуля = СтрШаблон("CommonModules%1%2%1Ext%1Module.bsl", РазделительПути, ИмяВКонфигураторе);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Существует = Ждать ФайлНаДиске.СуществуетАсинх();
	Если Существует Тогда
		ОбщийМодуль = Ждать ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ЗагруженоФункций = View().parseCommonModule(ОбщийМодуль.Имя, ОбщийМодуль.Текст, Глобальный);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Асинх Функция ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки)
	
	ЗагруженоФункций = 0;
	ТипМодуля = СтруктураВыгрузки.ТипМодуля;
	
	ИмяТипа = ?(ТипМодуля = "manager", "ManagerModule", "ObjectModule");
	
	ФайлМодуля = СтрШаблон("%1%2Ext%2%3.bsl", СтруктураВыгрузки.ИмяКаталога, РазделительПути, ИмяТипа);
	ФайлМодуля = КаталогИсходногоКода + ФайлМодуля;
	
	ФайлНаДиске = Новый Файл(ФайлМодуля);
	
	Существует = Ждать ФайлНаДиске.СуществуетАсинх();
	Если Существует Тогда
		Модуль = ПолучитьМодульИзИсходников(ФайлНаДиске.ПолноеИмя);
		ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		АдресЗагрузки = СтрШаблон("%1.items.%2.%3", ИмяКоллекции, СтруктураВыгрузки.ИмяОбъектаМетаданных, ТипМодуля);
		ЗагруженоФункций = View().parseMetadataModule(Модуль.Текст, АдресЗагрузки);
	КонецЕсли;
	
	Возврат ЗагруженоФункций;
	
КонецФункции

&НаКлиенте
Асинх Процедура ЗагрузитьГлобальныеМодули()
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	ЕстьГлобальныеМодули = (ГлобальныйМодули <> Неопределено И 0 < ГлобальныйМодули.Количество());
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЕстьГлобальныеМодули Тогда
		
		КаталогМодулей = КаталогИсходногоКода + "CommonModules";
		
		КаталогНаДиске = Новый Файл(КаталогМодулей);
		Существует = Ждать КаталогНаДиске.СуществуетАсинх();
		Если Существует Тогда
			
			Индекс = 0;
			
			Пока Индекс < ГлобальныйМодули.Количество() Цикл
				ИмяМодуля = ГлобальныйМодули.Получить(Индекс);
				ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Истина);
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 2;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		ИмяМодуля = ЧастиЗапроса[1];
		
		ЗагруженоФункций = Ждать ЗагрузитьОбщийМодульПоИмени(КаталогИсходногоКода, ИмяМодуля, Ложь);
		Если 0 < ЗагруженоФункций Тогда
			View().triggerSuggestions();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути)
	
	СтруктураВыгрузки.Вставить("ИмяКаталога", Неопределено);
	ЧастейМетаданных = 2;
	
	Попытка
		ПолноеИмя = Метаданные[СтруктураВыгрузки.ТипМетаданных][СтруктураВыгрузки.ОбъектМетаданных].ПолноеИмя();
	Исключение
		ПолноеИмя = "";
	КонецПопытки;
	
	Имена = СтрРазделить(ПолноеИмя, ".", Ложь);
	Если Имена.Количество() = ЧастейМетаданных Тогда
		
		КаталогТипа = ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(СтруктураВыгрузки.ТипМетаданных);
		Если ЗначениеЗаполнено(КаталогТипа) Тогда
			ИндексОбъекта = 1;
			СтруктураВыгрузки.Вставить("ИмяОбъектаМетаданных", Имена[ИндексОбъекта]);
			СтруктураВыгрузки.ИмяКаталога = СтрШаблон("%1%2%3", КаталогТипа, РазделительПути, Имена[ИндексОбъекта]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса)
	
	КаталогИсходногоКода = ПолучитьКаталогИсходногоКода();
	КоличествоЧастейЗапроса = 4;
	
	Если ЗначениеЗаполнено(КаталогИсходногоКода) И ЧастиЗапроса.Количество() = КоличествоЧастейЗапроса Тогда
		
		СтруктураВыгрузки = Новый Структура();
		СтруктураВыгрузки.Вставить("ТипМодуля", ЧастиЗапроса[1]);
		СтруктураВыгрузки.Вставить("ТипМетаданных", ЧастиЗапроса[2]);
		СтруктураВыгрузки.Вставить("ОбъектМетаданных", ЧастиЗапроса[3]);
		
		ДополнитьСтруктуруВыгрузкиИсходниковМетаданных(СтруктураВыгрузки, РазделительПути);
		
		Если ЗначениеЗаполнено(СтруктураВыгрузки.ИмяКаталога) Тогда
			
			ЗагруженоФункций = ЗагрузитьМодульМенеджераИлиОбъектаПоИмени(КаталогИсходногоКода, СтруктураВыгрузки);
			
			Если 0 < ЗагруженоФункций Тогда
				View().triggerSuggestions();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбщихМодулей()
	
	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресОбщихМодулей);
	
	Если КоллекцияМетаданных <> Неопределено Тогда
		Результат = View().updateMetadata(КоллекцияМетаданных, "commonModules.items");
		ЗагрузитьГлобальныеМодули();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеОбновлениеМетаданных

&НаСервереБезКонтекста
Функция ОписатьОбщиеМодули(Коллекция, ФильтрГлобальный = Ложь)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		Если ОбъектМетаданных.Глобальный = ФильтрГлобальный Тогда
			ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоллекциюОбщихМодулей()
	
	КоллекцияОбщихМодулей = Новый Структура();
	КоллекцияОбщихМодулей.Вставить("Общие", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Ложь));
	КоллекцияОбщихМодулей.Вставить("Глобальные", ОписатьОбщиеМодули(Метаданные.ОбщиеМодули, Истина));
	
	Возврат КоллекцияОбщихМодулей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяМетаданных(ПолноеИмя)
	
	Возврат СтрПолучитьСтроку(СтрЗаменить(ПолноеИмя, ".", Символы.ПС), 1);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетИзмерения(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("РегистрСведений");
	Объекты.Добавить("РегистрНакопления");
	Объекты.Добавить("РегистрБухгалтерии");
	Объекты.Добавить("РегистрРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетТЧ(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("Документ");
	Объекты.Добавить("Отчет");
	Объекты.Добавить("Обработка");
	Объекты.Добавить("БизнесПроцесс");
	Объекты.Добавить("Задача");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
	
	Объекты = Новый Массив();
	Объекты.Добавить("Справочник");
	Объекты.Добавить("ПланСчетов");	
	Объекты.Добавить("ПланВидовХарактеристик");
	Объекты.Добавить("ПланВидовРасчета");
	
	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();	
	
	Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
		ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "catalogs");
	СоответствиеИмен.Вставить("документы"                   , "documents");
	СоответствиеИмен.Вставить("documents"                   , "documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "infoRegs");
	СоответствиеИмен.Вставить("informationregisters"        , "infoRegs");
	СоответствиеИмен.Вставить("регистрынакопления"          , "accumRegs");
	СоответствиеИмен.Вставить("accumulationregisters"       , "accumRegs");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "accountRegs");
	СоответствиеИмен.Вставить("accountingregisters"         , "accountRegs");
	СоответствиеИмен.Вставить("регистрырасчета"             , "calcRegs");
	СоответствиеИмен.Вставить("calculationregisters"        , "calcRegs");
	СоответствиеИмен.Вставить("обработки"                   , "dataProc");
	СоответствиеИмен.Вставить("dataprocessors"              , "dataProc");
	СоответствиеИмен.Вставить("отчеты"                      , "reports");
	СоответствиеИмен.Вставить("reports"                     , "reports");
	СоответствиеИмен.Вставить("перечисления"                , "enums");
	СоответствиеИмен.Вставить("enums"                       , "enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "сhartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "businessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "businessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "tasks");
	СоответствиеИмен.Вставить("tasks"                       , "tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "exchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "exchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "chartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "chartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "constants");
	СоответствиеИмен.Вставить("constants"                   , "constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаВыгрузкиМетаданныхПоТипу(ТипОбъектов)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("справочники"                 , "Catalogs");
	СоответствиеИмен.Вставить("catalogs"                    , "Catalogs");
	СоответствиеИмен.Вставить("документы"                   , "Documents");
	СоответствиеИмен.Вставить("documents"                   , "Documents");
	СоответствиеИмен.Вставить("регистрысведений"            , "InformationRegisters");
	СоответствиеИмен.Вставить("informationregisters"        , "InformationRegisters");
	СоответствиеИмен.Вставить("регистрынакопления"          , "AccumulationRegisters");
	СоответствиеИмен.Вставить("accumulationregisters"       , "AccumulationRegisters");
	СоответствиеИмен.Вставить("регистрыбухгалтерии"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("accountingregisters"         , "AccountingRegisters");
	СоответствиеИмен.Вставить("регистрырасчета"             , "CalculationRegisters");
	СоответствиеИмен.Вставить("calculationregisters"        , "CalculationRegisters");
	СоответствиеИмен.Вставить("обработки"                   , "DataProcessors");
	СоответствиеИмен.Вставить("dataprocessors"              , "DataProcessors");
	СоответствиеИмен.Вставить("отчеты"                      , "Reports");
	СоответствиеИмен.Вставить("reports"                     , "Reports");
	СоответствиеИмен.Вставить("перечисления"                , "Enums");
	СоответствиеИмен.Вставить("enums"                       , "Enums");
	СоответствиеИмен.Вставить("планысчетов"                 , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("chartsofaccounts"            , "ChartsOfAccounts");
	СоответствиеИмен.Вставить("бизнеспроцессы"              , "BusinessProcesses");
	СоответствиеИмен.Вставить("businessprocesses"           , "BusinessProcesses");
	СоответствиеИмен.Вставить("задачи"                      , "Tasks");
	СоответствиеИмен.Вставить("tasks"                       , "Tasks");
	СоответствиеИмен.Вставить("планыобмена"                 , "ExchangePlans");
	СоответствиеИмен.Вставить("exchangeplans"               , "ExchangePlans");
	СоответствиеИмен.Вставить("планывидовхарактеристик"     , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("chartsofcharacteristictypes" , "ChartsOfCharacteristicTypes");
	СоответствиеИмен.Вставить("планывидоврасчета"           , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("chartsofcalculationtypes"    , "ChartsOfCalculationTypes");
	СоответствиеИмен.Вставить("константы"                   , "Constants");
	СоответствиеИмен.Вставить("constants"                   , "Constants");
	
	Возврат СоответствиеИмен[ТипОбъектов];
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи)
	
	Связь = "";
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	Пока Индекс < Типы.Количество() И НЕ ЗначениеЗаполнено(Связь) Цикл
		
		Тип = Типы[Индекс];
		
		СвязьТипа = Связи[Тип];
		Если СвязьТипа = Неопределено Тогда
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных <> Неопределено Тогда
				
				// Сейчас связи описыватьются только для справочников и документов.
				// При желании, пожертвовав скоростью получения описания всех метаданных
				// сюда же можно добавить следующие элементы:
				// Метаданные.БизнесПроцессы businessProcesses
				// Метаданные.Задачи tasks
				// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
				// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
				// Метаданные.ПланыОбмена exchangePlans
				// Метаданные.ПланыСчетов сhartsOfAccounts
				Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					Связь = "catalogs." + ОбъектМетаданных.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					Связь = "documents." + ОбъектМетаданных.Имя;
				Иначе
					Связь = "";
				КонецЕсли;
				
			КонецЕсли;
			
			Связи[Тип] = Связь;
		Иначе
			Связь = СвязьТипа;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи)
	
	Связь = ?(Связи <> Неопределено, ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи), "");
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(ТипОбъектов);
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		Коллекция = Метаданные[ТипОбъектов];
		
		СписокОбъектов = ПолучитьСписокОбъектовМетаданныхИзКоллекции(Коллекция);		
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СписокОбъектов);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
		АдресОбновления = ИмяКоллекции + ".items";
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя)
	
	ТипРегистра = "";
	
	Если ИмяМетаданных(ПолноеИмя) = "РегистрСведений" Тогда
		
		Непериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		Если ОбъектМетаданных.ПериодичностьРегистраСведений = Непериодический Тогда
			ТипРегистра = "nonperiodical";
		Иначе
			ТипРегистра = "periodical";
		КонецЕсли;
		
	ИначеЕсли ИмяМетаданных(ПолноеИмя) = "РегистрНакопления" Тогда
		
		Если ОбъектМетаданных.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			ТипРегистра = "balance";
		Иначе
			ТипРегистра = "turnovers";
		КонецЕсли;
	Иначе
		
		ТипРегистра = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРегистра) Тогда
		ДополнительныеСвойства.Вставить("type", ТипРегистра);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных)
	
	Если ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя) Тогда
		
		Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаПланаСчетов.Код КАК Код,
			|	ТаблицаПланаСчетов.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	&Таблица КАК ТаблицаПланаСчетов
			|ГДЕ
			|	ТаблицаПланаСчетов.Предопределенный");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл 
				ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
			КонецЦикла;
		Иначе
			
			Предопределенные = ОбъектМетаданных.ПолучитьИменаПредопределенных();
			Для Каждого Имя Из Предопределенные Цикл
				ОписаниеПредопределенных.Вставить(Имя, "");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов,
	ОписаниеРесурсов, ДополнительныеСвойства, Связи)
	
	Если ОбъектМетаданныхИмеетИзмерения(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Измерения.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Измерения.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.Ресурсы.Количество() - 1 Цикл
			Реквизит = ОбъектМетаданных.Ресурсы.Получить(НомерРеквизита);
			ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Реквизит, Связи);
		КонецЦикла;
		
		ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи)
	
	Если ОбъектМетаданныхИмеетТЧ(ПолноеИмя) Тогда
		
		Для НомерРеквизита = 0 По ОбъектМетаданных.ТабличныеЧасти.Количество() - 1 Цикл
			
			ТабличнаяЧасть = ОбъектМетаданных.ТабличныеЧасти.Получить(НомерРеквизита);
			ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
			
			ОписаниеТабличнойЧасти = Новый Структура();
			
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
				ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Имя, РеквизитТЧ.Синоним);
			КонецЦикла;
			
			Для НомерРеквизитаТЧ = 0 По ТабличнаяЧасть.Реквизиты.Количество() - 1 Цикл
				РеквизитТЧ = ТабличнаяЧасть.Реквизиты.Получить(НомерРеквизитаТЧ);
				ДобавитьОписаниеРеквизита(ОписаниеТабличнойЧасти, РеквизитТЧ, Связи);
			КонецЦикла;
			
			Если 0 < ОписаниеТабличнойЧасти.Количество() Тогда
				ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.Реквизиты.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.Реквизиты.Получить(НомерРеквизита);
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи)
	
	Если ОбъектМетаданныхИмеетСтандартныеРеквизиты(ПолноеИмя) Тогда
		
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов)
	
	Для НомерРеквизита = 0 По ОбъектМетаданных.ЗначенияПеречисления.Количество() - 1 Цикл
		Реквизит = ОбъектМетаданных.ЗначенияПеречисления.Получить(НомерРеквизита);
		ОписаниеРеквизитов.Вставить(Реквизит.Имя, Новый Структура("name", Реквизит.Синоним));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления)
	
	ОписаниеМетаданных = "";
	
	Части = СтрРазделить(ТипОбъекта, ".");
	
	ИмяКоллекции = ПолучитьИмяКоллекцииМетаданныхПоТипу(Части[0]);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		
		ОписаниеРеквизитов = Новый Структура();
		ОписаниеРесурсов = Новый Структура();
		ОписаниеПредопределенных = Новый Структура();
		ОписаниеТабличныхЧастей = Новый Структура();
		ДополнительныеСвойства = Новый Структура();
		
		Связи = Новый Соответствие();
		
		ОбъектМетаданных = Метаданные[Части[0]][Части[1]];
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если ИмяМетаданных(ПолноеИмя) = "Перечисление" Тогда
			ЗаполнитьОписаниеЗначенийПеречисления(ОбъектМетаданных, ОписаниеРеквизитов);
		Иначе
			ЗаполнитьОписаниеРеквизитов(ОбъектМетаданных, ОписаниеРеквизитов, Связи);
			ЗаполнитьОписаниеСтандартныхРеквизитов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, Связи);
			ЗаполнитьОписаниеПредопределенныхЭлементов(ОбъектМетаданных, ПолноеИмя, ОписаниеПредопределенных);
			ЗаполнитьОписаниеИзмеренийРесурсов(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеРесурсов, ДополнительныеСвойства, Связи);
			ЗаполнитьОписаниеТабличныхЧастей(ОбъектМетаданных, ПолноеИмя, ОписаниеРеквизитов, ОписаниеТабличныхЧастей, Связи);
		КонецЕсли;
		
		СтруктураОбъекта = Новый Структура();
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
		
		Для Каждого Обход Из ДополнительныеСвойства Цикл
			СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
		КонецЦикла;
		
		Если 0 < ОписаниеРесурсов.Количество() Тогда
			СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
		КонецЕсли;
		
		Если 0 < ОписаниеПредопределенных.Количество() Тогда
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
		КонецЕсли;
		
		Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
			СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
		КонецЕсли;
		
		Файл = Новый ЗаписьJSON();
		Файл.УстановитьСтроку();
		Попытка
			ЗаписатьJSON(Файл, СтруктураОбъекта);
		Исключение
			ВызватьИсключение("Не удалось сохранить коллекцию метаданных:" + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		
		АдресОбновления = ИмяКоллекции + ".items." + ОбъектМетаданных.Имя;
		
		ОписаниеМетаданных = Файл.Закрыть();
		
	КонецЕсли;
	
	Возврат ОписаниеМетаданных;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьОписаниеОбъектаМетаданных(ПараметрыЗапроса, АдресОбновления);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			View().triggerSuggestions();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса)
	
	АдресОбновления = "";
	ОписаниеМетаданных = ПолучитьСписокОбъектовМетаданных(ПараметрыЗапроса, АдресОбновления);
		
	Если ЗначениеЗаполнено(ОписаниеМетаданных) Тогда
		
		Если ТипЗнч(View().updateMetadata(ОписаниеМетаданных, АдресОбновления)) = Тип("Булево") Тогда
			View().triggerSuggestions();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие)
	
	ПараметрыЗапроса = НРег(Событие.params);
	Если 0 < СтрНайти(ПараметрыЗапроса, ".") Тогда
		
		ЧастиЗапроса = СтрРазделить(ПараметрыЗапроса, ".");
		
		Если ЧастиЗапроса[0] = "module" Тогда
			
			Если ЧастиЗапроса.Количество() = 2 Тогда
				ЗагрузитьСтруктуруОбщегоМодуляПоЗапросу(ЧастиЗапроса);
			Иначе
				ЗагрузитьСтруктуруМодуляМенеджераИлиОбъектаПоЗапросу(ЧастиЗапроса);
			КонецЕсли;
		Иначе
			ЗагрузитьОбъектМетаданныхПоЗапросу(ПараметрыЗапроса);
		КонецЕсли;
	Иначе
		ЗагрузитьСписокМетаданныхПоЗапросу(ПараметрыЗапроса);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторЗапросов

&НаКлиенте
Процедура ПриЗакрытииКонструктораЗапросов(Текст, ДопПараметры) Экспорт
	
	Если Текст <> Неопределено Тогда
		
		Если Не View().queryMode Тогда
			Текст = СтрЗаменить(Текст, Символы.ПС, Символы.ПС + "|");
			Текст = СтрЗаменить(Текст, """", """""");
			Текст = """" + Текст + """";
		КонецЕсли;
		
		УстановитьТекст(Текст, ДопПараметры, Истина);
		ОбновитьИсполняемыйКод();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Текст, ДопПараметры)
	
	Конструктор = Новый КонструкторЗапроса();
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Попытка
			Конструктор.Текст = Текст;
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(, "Ошибка в тексте запроса:" + Символы.ПС + Инфо.Причина.Описание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Конструктор.Показать(Новый ОписаниеОповещения("ПриЗакрытииКонструктораЗапросов", ЭтотОбъект, ДопПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовыйЗапрос(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторЗапроса("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьТекстЗапроса(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ВызватьКонструкторЗапроса(ПараметрыЗапроса)
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ТекстВопроса = "Не найден текст запроса." + Символы.ПС + "Создать новый запрос?";
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросСоздатьНовыйЗапрос", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстЗапроса = ПодготовитьТекстЗапроса(ПараметрыЗапроса.text);
		ОткрытьКонструкторЗапроса(ТекстЗапроса, ПараметрыЗапроса.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторФорматнойСтроки

&НаКлиенте
Процедура ПриЗакрытииКонструктораФорматнойСтроки(ФорматнаяСтрока, ДопПараметры) Экспорт
	
	Если ФорматнаяСтрока <> Неопределено Тогда	
		ФорматнаяСтрока = СтрЗаменить(ФорматнаяСтрока, "'", "");
		ФорматнаяСтрока = """" + ФорматнаяСтрока + """";
		УстановитьТекст(ФорматнаяСтрока, ДопПараметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ДопПараметры)
	
	Конструктор = Новый КонструкторФорматнойСтроки();
	Попытка
		Конструктор.Текст = ФорматнаяСтрока;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, "Ошибка в тексте форматной строки:" + Символы.ПС + Инфо.Причина.Описание);
		Возврат;
	КонецПопытки;
	
	Конструктор.Показать(Новый ОписаниеОповещения("ПриЗакрытииКонструктораФорматнойСтроки", ЭтотОбъект, ДопПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьНовуюФорматнуюСтроку(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьКонструкторФорматнойСтроки("", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьКонструкторФорматнойСтроки(ПараметрыСтроки)
	
	Если ПараметрыСтроки = Неопределено Тогда
		ТекстВопроса = "Форматная строка не найдена." + Символы.ПС + "Создать новую форматную строку?";
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросСоздатьНовуюФорматнуюСтроку", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ФорматнаяСтрока = СтрЗаменить(СтрЗаменить(ПараметрыСтроки.text, "|", ""), """", "");
		ОткрытьКонструкторФорматнойСтроки(ФорматнаяСтрока, ПараметрыСтроки.range);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПоказатьПредупреждение(
		Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтотОбъект,
		Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль)), Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРазделительПути()
	
	РазделительПути = ПолучитьРазделительПути();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяТемы()
	
	Возврат "bsl-white";
	
КонецФункции

&НаКлиенте
Процедура ПереключитьТему(Тема)
	
	Элементы.ПолеHTML.Документ.monaco.editor.setTheme(Тема);
	
КонецПроцедуры

&НаКлиенте
Функция ВебДокументДоступен()
	
	Если Элементы.ПолеHTML.Документ <> Неопределено И Элементы.ПолеHTML.Документ.defaultView <> Неопределено Тогда
		Попытка
			ПолучитьТекст();
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль()
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтотОбъект);
		НачатьУдалениеФайлов(Оповещение, ИндексныйФайл);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюКартыКода()
	
	Элементы.КартаКода.Пометка = ВидимостьКартыКода;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСтрокиСостояния()
	
	Элементы.СтрокаСостояния.Пометка = ВидимостьСтрокиСостояния;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюПодсветкиЗапросов()
	
	Элементы.ПодсвечиватьЗапросы.Пометка = ПодсвечиватьЗапросы;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПараметрами

&НаКлиенте
Процедура ИнициализацияТипаИЗначенияПараметра(ТекущийПараметр, ТекущийТип)
	
	// Тип в табличной части.
	ТекущийПараметр.Тип = ТипСтрока(ТекущийТип.Значение);
	
	// Тип в форме.
	Массив = Новый Массив;
	Массив.Добавить(Тип(ТекущийПараметр.Тип));
	Описание = Новый ОписаниеТипов(Массив);
	
	ТекущийПараметр.ТипВФорме = ТекущийТип.Представление;
	
	// Значение в форме.
	Значение = Описание.ПривестиЗначение(Тип(ТекущийТип.Значение));
	ТекущийПараметр.ЗначениеВФорме = Значение;
	
КонецПроцедуры

// Возвращает строковое представление типа.
// Например, для ссылки справочника возвращает "CatalogRef.ИмяСправочника".
//
&НаСервереБезКонтекста
Функция ТипСтрока(Знач Значение)
	
	СписокДобавленныхТипов = Новый СписокЗначений;
	Справочники.__ПользовательскиеФункции.СформироватьСписокТипов(СписокДобавленныхТипов);
	
	ТипСтрока = Строка(Тип(Значение));
	Если Значение = "СписокЗначений" Тогда
		Возврат "СписокЗначений";
	КонецЕсли;
		
	ТипНайден = Ложь;
	Для Каждого ЭлементСписка Из СписокДобавленныхТипов Цикл
		Если ЭлементСписка.Представление = ТипСтрока Тогда
			ТипНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТипНайден Тогда
		ТипСтрока = XMLТип(Тип(Значение)).ИмяТипа;
	КонецЕсли;
	
	Возврат ТипСтрока;
	
КонецФункции

&НаСервере
Процедура УдалениеДанныхИзВременногоХранилища()
	Для Каждого Параметр Из Объект.ПараметрыФункции Цикл
		Если ЗначениеЗаполнено(Параметр.АдресЗначения) Тогда
			УдалитьИзВременногоХранилища(Параметр.АдресЗначения);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыФункции(Отказ = Ложь)
	
	НастройкиПараметров = ПолучитьПараметрыФункции();
	
	// Ключ - Идентификатор параметра, Значение - Структура("Имя,Тип,Значение")
	Данные = Новый Соответствие;
	Для Каждого Параметр Из Объект.ПараметрыФункции Цикл
		ОписаниеПараметра = Новый Структура;
		ОписаниеПараметра.Вставить("Имя", Параметр.Наименование);
		ОписаниеПараметра.Вставить("Тип", Параметр.Тип);
		// Берем значение с формы только для типов не требующих преобразования
		Значение = Параметр.ЗначениеВФорме;
		Если ЗначениеЗаполнено(Параметр.АдресЗначения) Тогда
			Значение = ПолучитьИзВременногоХранилища(Параметр.АдресЗначения);
			УдалитьИзВременногоХранилища(Параметр.АдресЗначения);
		КонецЕсли;
		ОписаниеПараметра.Вставить("Значение", Значение);
		Данные.Вставить(Параметр.Идентификатор, ОписаниеПараметра);
	КонецЦикла;
	
	КлючНастроек = КлючНастроек("ПараметрыФункции", Истина);
	__ОбщегоНазначенияСлужебный.ХранилищеОбщихНастроекСохранить(КлючОбъекта(),
		КлючНастроек, Данные);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФункции()
	
	КлючНастроек = КлючНастроек("ПараметрыФункции", Истина);
	Возврат __ОбщегоНазначенияСлужебный.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта(),
		КлючНастроек, Новый Соответствие);
	
КонецФункции

&НаСервере
Функция КлючНастроек(Настройка, ИспользоватьУИД = Ложь)
	
	Если ИспользоватьУИД Тогда
		GUID = Объект.Ссылка.УникальныйИдентификатор();
		Возврат "__ПользовательскиеФункции_" + Настройка + "_" + GUID;
	Иначе
		Возврат "__ПользовательскиеФункции_" + Настройка;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьКоллекциюИПоместитьВХранилище(Знач Значение)
	
	ПустаяКоллекция = Новый(Тип(Значение));
	АдресЗначения = ПоместитьВоВременноеХранилище(ПустаяКоллекция, Новый УникальныйИдентификатор);
	
	Возврат АдресЗначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
