// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

////////////////////////////////////////////////////////////////////////////////
// Общего назначения служебный (клиент) сервер: для клиентских и серверных функций общего назначения

#Область СлужебныйПрограммныйИнтерфейс

#Область ПереадресацияМетодов

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.УстановитьСвойствоЭлементаФормы.
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение) Экспорт
	
	Модуль = ПолучитьМодуль();
	Модуль.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение);
	
КонецПроцедуры

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.СвойствоСтруктуры.
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено) Экспорт

	Модуль = ПолучитьМодуль();
	Возврат Модуль.СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию);
	
КонецФункции

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ДополнитьМассив.
Процедура ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения = Ложь) Экспорт

	Модуль = ПолучитьМодуль();
	Модуль.ДополнитьМассив(МассивПриемник, МассивИсточник, ТолькоУникальныеЗначения);
	
КонецПроцедуры

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.СвернутьМассив.
Функция СвернутьМассив(Знач Массив) Экспорт
	
	Модуль = ПолучитьМодуль();
	Возврат Модуль.СвернутьМассив(Массив);
	
КонецФункции

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ЗначениеСвойстваЭлементаФормы.
Функция ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства) Экспорт
	
	Модуль = ПолучитьМодуль();
	Возврат Модуль.ЗначениеСвойстваЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства);
	
КонецФункции

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта.
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Модуль = ПолучитьМодуль();
	Возврат Модуль.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ДополнитьСтруктуру.
Процедура ДополнитьСтруктуру(Приемник, Источник, Заменять = Неопределено) Экспорт
	
	Модуль = ПолучитьМодуль();
	Модуль.ДополнитьСтруктуру(Приемник, Источник, Заменять);
	
КонецПроцедуры

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ЗначениеВМассиве.
Функция ЗначениеВМассиве(Знач Значение) Экспорт
	
	Модуль = ПолучитьМодуль();
	Возврат Модуль.ЗначениеВМассиве(Значение);
	
КонецФункции

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.Проверить.
Процедура Проверить(Знач Условие, Знач Сообщение = "", Знач КонтекстПроверки = "") Экспорт
	
	Модуль = ПолучитьМодуль();
	Модуль.Проверить(Условие, Сообщение, КонтекстПроверки);
	
КонецПроцедуры

// См. пбп_ОбщегоНазначенияСлужебныйКлиентСервер.ЭтоЧисло.
Функция ЭтоЧисло(Знач ПроверяемоеЗначение) Экспорт 
	
	Модуль = ПолучитьМодуль();
	Возврат Модуль.ЭтоЧисло(ПроверяемоеЗначение);
	
КонецФункции

#КонецОбласти

#Область МетодыАналогиБСП

// Аналог метода БСП.
//
Функция СообщениеПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
	
	Отказ = Истина;
	
	Возврат Сообщение;
	
КонецФункции

#Область ЗапускВнешнихПриложений

// Аналог метода БСП. Параметры:
//  КомандаЗапуска - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция БезопаснаяСтрокаКоманды(КомандаЗапуска) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(КомандаЗапуска) = Тип("Строка") Тогда
		
		ПроверитьСодержитНебезопасныеДействия(КомандаЗапуска);
		Результат = КомандаЗапуска;
		
	ИначеЕсли ТипЗнч(КомандаЗапуска) = Тип("Массив") Тогда
		
		Если КомандаЗапуска.Количество() > 0 Тогда
			ПроверитьСодержитНебезопасныеДействия(КомандаЗапуска[0]);
			Результат = МассивВСтрокуКоманды(КомандаЗапуска);
		Иначе
			ВызватьИсключение пбп_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидалось, что первый элемент массива %1 будет командой или путем к исполняемому файлу.'"),
				"КомандаЗапуска");
		КонецЕсли;
		
	Иначе
		ВызватьИсключение пбп_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ожидалось, что значение %1 будет типа %2 или %3.'"), 
			"КомандаЗапуска", "Строка", "Массив");
	КонецЕсли;
		
	Возврат Результат
	
КонецФункции

#КонецОбласти

#КонецОбласти // МетодыАналогиБСП

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМодуль()
	
	#Если Клиент Тогда
		Возврат пбп_ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ОбщегоНазначенияКлиентСервер",
			"пбп_ОбщегоНазначенияКлиентСервер");
	#Иначе
		Возврат пбп_ОбщегоНазначенияВызовСервера.ПереадресацияОбщегоМодуля(
			"ОбщегоНазначенияКлиентСервер",
			"пбп_ОбщегоНазначенияКлиентСервер");
	#КонецЕсли
	
КонецФункции

#Область МетодыАналогиБСП

#Если Не ВебКлиент И Не МобильныйКлиент Тогда

Функция СтрокаЗапускаКомандыWindows(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодировкаИсполнения) Экспорт
	
	НаборКоманд = "";
	
	Если ЗначениеЗаполнено(КодировкаИсполнения) Тогда 
		
		Если КодировкаИсполнения = "OEM" Тогда
			КодировкаИсполнения = 437;
		ИначеЕсли КодировкаИсполнения = "CP866" Тогда
			КодировкаИсполнения = 866;
		ИначеЕсли КодировкаИсполнения = "UTF8" Тогда
			КодировкаИсполнения = 65001;
		КонецЕсли;
		
		НаборКоманд = "(chcp " + Формат(КодировкаИсполнения, "ЧГ=") + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекущийКаталог) Тогда 
		НаборКоманд = НаборКоманд + ?(ЗначениеЗаполнено(НаборКоманд), "&&", "") + "(cd /D """ + ТекущийКаталог + """)";
	КонецЕсли;
	НаборКоманд = НаборКоманд + ?(ЗначениеЗаполнено(НаборКоманд), "&&", "") + "(" + СокрЛП(СтрокаКоманды) + ")";
	
	Возврат "cmd /S /C """ + НаборКоманд + """";
	
КонецФункции

#КонецЕсли

#Область БезопаснаяСтрокаКоманды

Функция СодержитНебезопасныеДействия(Знач СтрокаКоманды)
	
	Возврат СтрНайти(СтрокаКоманды, "${") <> 0
		Или СтрНайти(СтрокаКоманды, "$(") <> 0
		Или СтрНайти(СтрокаКоманды, "`") <> 0
		Или СтрНайти(СтрокаКоманды, "|") <> 0
		Или СтрНайти(СтрокаКоманды, ";") <> 0
		Или СтрНайти(СтрокаКоманды, "&") <> 0;
	
КонецФункции

Процедура ПроверитьСодержитНебезопасныеДействия(Знач КомандаЗапуска)
	Если СодержитНебезопасныеДействия(КомандаЗапуска) Тогда 
		ВызватьИсключение пбп_СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось запустить программу.
			           |Недопустимая строка команды
			           |%1
			           |
			           |Строка команды не должна содержать символы: ""${"", ""$("", ""`"", ""|"", "";"", ""&"".'"),
			КомандаЗапуска);
	КонецЕсли;
КонецПроцедуры

Функция МассивВСтрокуКоманды(КомандаЗапуска)
	
	Результат = Новый Массив;
	НужныКавычки = Ложь;
	Для Каждого Аргумент Из КомандаЗапуска Цикл
		
		Если Результат.Количество() > 0 Тогда 
			Результат.Добавить(" ")
		КонецЕсли;
		
		НужныКавычки = Аргумент = Неопределено
			Или ПустаяСтрока(Аргумент)
			Или СтрНайти(Аргумент, " ")
			Или СтрНайти(Аргумент, Символы.Таб)
			Или СтрНайти(Аргумент, "&")
			Или СтрНайти(Аргумент, "(")
			Или СтрНайти(Аргумент, ")")
			Или СтрНайти(Аргумент, "[")
			Или СтрНайти(Аргумент, "]")
			Или СтрНайти(Аргумент, "{")
			Или СтрНайти(Аргумент, "}")
			Или СтрНайти(Аргумент, "^")
			Или СтрНайти(Аргумент, "=")
			Или СтрНайти(Аргумент, ";")
			Или СтрНайти(Аргумент, "!")
			Или СтрНайти(Аргумент, "'")
			Или СтрНайти(Аргумент, "+")
			Или СтрНайти(Аргумент, ",")
			Или СтрНайти(Аргумент, "`")
			Или СтрНайти(Аргумент, "~")
			Или СтрНайти(Аргумент, "$")
			Или СтрНайти(Аргумент, "|");
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""");
		КонецЕсли;
		
		Результат.Добавить(СтрЗаменить(Аргумент, """", """"""));
		
		Если НужныКавычки Тогда 
			Результат.Добавить("""");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

#КонецОбласти // БезопаснаяСтрокаКоманды

#КонецОбласти // МетодыАналогиБСП

#КонецОбласти
