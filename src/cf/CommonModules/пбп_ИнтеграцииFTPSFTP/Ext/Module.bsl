// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

#Область ПрограммныйИнтерфейс

// Параметры сообщения FTP / SFTP
// 
// Возвращаемое значение:
//  Структура - содержит ключи для описания сообщения обмена:
//   - Путь - путь к файлу временного хранилища на сервере
//   - ИмяФайла - имя файла без расширения
//   - Расширение - расширение (файла без точки)
//   - ДвоичныеДанные - данные файла. Если ключ "Путь" не заполнен, то его значение будет заполнено
//   путем к временному файлу, сохраненного из этих двоичных данных
//
Функция ПараметрыСообщенияFTPSFTP() Экспорт
	
	Результат = Новый Структура("Путь, ИмяФайла, Расширение, ДвоичныеДанные");
	Возврат Результат;
	
КонецФункции

// Получить структуру параметров подключения к серверу FTP / SFTP
//
// Параметры:
//  НастройкаИнтеграции - СправочникСсылка.пбп_НастройкиИнтеграции - настройка интеграции,
//  для которой необходимо получить параметры
// 
// Возвращаемое значение:
//  Структура - Параметры соединения с сервером из настроек интеграции и безопасного хранилища
//
Функция ПолучитьПараметрыПодключенияFTPSFTP(НастройкаИнтеграции) Экспорт
	
	СтруктураНастроек = пбп_ИнтеграцииСлужебный.ПолучитьСтруктуруНастроекИнтеграции(НастройкаИнтеграции);
	
	ПараметрыСоединения = ПараметрыСоединенияFTPSFTP();
	ПараметрыСоединения.Адрес = СтруктураНастроек.СтрокаПодключения;
	ПараметрыСоединения.Порт = Число(СтруктураНастроек.Порт);
	
	Если СтруктураНастроек.Свойство("Логин") Тогда
		ПараметрыСоединения.Логин = СтруктураНастроек.Логин.Значение;
	Иначе
		ПараметрыСоединения.Логин = "";
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("Пароль") Тогда
		ПараметрыСоединения.Пароль = СтруктураНастроек.Пароль.Значение;
	Иначе
		ПараметрыСоединения.Пароль = "";
	КонецЕсли;
	
	Возврат ПараметрыСоединения;
	
КонецФункции

#Область FTP

// Выполнить подключение к FTP-серверу по настройке интеграции
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к FTP-серверу
// 
// Возвращаемое значение:
//  FTPСоединение, Строка - возвращает FTP-соединение по указанным настройкам, либо строку с описанием ошибки
//
Функция ВыполнитьПодключениеКFTPСерверуДляИнтеграционногоПотока(ИнтеграционныйПоток) Экспорт
	
	СтруктураРеквизитов = пбп_ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(
		ИнтеграционныйПоток, "НастройкаИнтеграции, ТочкаВхода");
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияFTPSFTP(СтруктураРеквизитов.НастройкаИнтеграции);
	
	Порт = ?(Не ЗначениеЗаполнено(ПараметрыСоединения.Порт), 21, ПараметрыСоединения.Порт);
	
	Таймаут = 0;
	
	Попытка
		FTPСоединение = Новый FTPСоединение(ПараметрыСоединения.Адрес,
			Порт, ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль, , , Таймаут);
	Исключение
		ЗаголовокОшибки = "Не удалось установить соединение с FTP-сервером";
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
		
		Возврат СообщениеОбОшибке;
	КонецПопытки;
		
	КаталогИсходящие = СтруктураРеквизитов.ТочкаВхода;
	КаталогИсходящие = СокрЛП(КаталогИсходящие);
	Если Лев(КаталогИсходящие, 1) <> "/" Тогда
		КаталогИсходящие = "/" + КаталогИсходящие;
	КонецЕсли;
	
	Если FTPСоединение.ТекущийКаталог() <> КаталогИсходящие Тогда
		Попытка
			FTPСоединение.УстановитьТекущийКаталог(КаталогИсходящие);
		Исключение
			ЗаголовокОшибки = "Не удалось установить каталог для исходящих на FTP-сервере";
			СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
				ЗаголовокОшибки, ИнформацияОбОшибке());
			
			Возврат СообщениеОбОшибке;
		КонецПопытки;
	КонецЕсли;
	
	Возврат FTPСоединение;
	
КонецФункции

// Отправить сообщение FTP
//
// Параметры:
//  ПодключениеКFTP - FTPСоединение- текущее соединение с FTP-сервером
//  ПараметрыСообщения - Структура - параметры сообщения (см. ПараметрыСообщенияFTP)
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция ОтправитьСообщениеFTP(ПодключениеКFTP, ПараметрыСообщения) Экспорт
	
	ЗаголовокОшибки = "Файл не был создан";
	СообщениеОбОшибке = "";
	
	Попытка
		ИмяФайлаСРасширением = СтрШаблон("%1.%2", ПараметрыСообщения.ИмяФайла, ПараметрыСообщения.Расширение);
		
		Если ПустаяСтрока(ПараметрыСообщения.Путь) Тогда
			// BSLLS:MissingTemporaryFileDeletion-off
			// Необходимо пропустить проверку, так как файл удаляется позже
			НовыйФайл = ПолучитьИмяВременногоФайла(ПараметрыСообщения.Расширение);
			// BSLLS:MissingTemporaryFileDeletion-on
			ПараметрыСообщения.Данные.Записать(НовыйФайл);
			ПараметрыСообщения.Путь = НовыйФайл;
		КонецЕсли;
		
		ПодключениеКFTP.Записать(ПараметрыСообщения.Путь, ИмяФайлаСРасширением);
		
		// Повторно проверяем наличие записанного файла
		КаталогИсходящие = ПодключениеКFTP.ТекущийКаталог();
		
		Если Не ПроверитьФайлЕстьНаFTP(ПодключениеКFTP, ИмяФайлаСРасширением, КаталогИсходящие) Тогда
			ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2';",
				ЗаголовокОшибки, "подробности уточните у администратора системы");
			СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
		КонецЕсли;
		
		пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(НовыйФайл);
	Исключение
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Прочитать сообщение FTP
//
// Параметры:
//  ПодключениеКFTP - FTPСоединение- текущее соединение с FTP-сервером
//  ПараметрыСообщения - Структура - параметры сообщения (см. ПараметрыСообщенияFTP)
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция ПрочитатьСообщениеFTP(ПодключениеКFTP, ПараметрыСообщения) Экспорт
	
	ЗаголовокОшибки = "Файл не был получен";
	СообщениеОбОшибке = "";
	
	Попытка
		ИмяФайлаСРасширением = СтрШаблон("%1.%2", ПараметрыСообщения.ИмяФайла, ПараметрыСообщения.Расширение);
		
		// Проверяем наличие получаемого файла
		КаталогВходящие = ПодключениеКFTP.ТекущийКаталог();
		
		Если Не ПроверитьФайлЕстьНаFTP(ПодключениеКFTP, ИмяФайлаСРасширением, КаталогВходящие) Тогда
			ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2';",
				ЗаголовокОшибки, "искомый файл отсутствует на FTP-сервере");
			СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
			Возврат СообщениеОбОшибке;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыСообщения.Путь) Тогда
			// BSLLS:MissingTemporaryFileDeletion-off
			// Необходимо пропустить проверку, так как полученный файл должен храниться до его обработки
			ПараметрыСообщения.Путь = ПолучитьИмяВременногоФайла(ПараметрыСообщения.Расширение);
			// BSLLS:MissingTemporaryFileDeletion-on
		КонецЕсли;
		
		ПодключениеКFTP.Получить(ИмяФайлаСРасширением, ПараметрыСообщения.Путь);
	Исключение
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Проверяет наличие файла на FTP
//
// Параметры:
//  FTPСоединение		 - FTPСоединение - текущее соединение с FTP-сервером
//  ИмяФайла			 - Строка - имя искомого файла
//  КаталогПоиска		 - Строка - каталог поиска файла на FTP-сервере
//  ПоТочномуСовпадению	 - Булево - если Истина, то поиск на равенство, если Ложь - по вхождению
// 
// Возвращаемое значение:
//  Булево - файл найден
//
Функция ПроверитьФайлЕстьНаFTP(FTPСоединение, ИмяФайла, КаталогПоиска, ПоТочномуСовпадению = Истина) Экспорт
	
	Результат = Ложь;
	
	ФайлыНаРесурсе = FTPСоединение.НайтиФайлы(КаталогПоиска);
	Для Каждого ФайлНаСервере Из ФайлыНаРесурсе Цикл
		Если ПоТочномуСовпадению Тогда
			Если ВРег(ФайлНаСервере) = ВРег(ИмяФайла) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если СтрНайти(ВРег(ФайлНаСервере), ВРег(ИмяФайла), НаправлениеПоиска.СНачала) > 0 Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // FTP

#Область SFTP

// Отправляет сообщение на SFTP-сервер.
// Для отправки на ОС Linux используется одна из установленных утилит:
// 1) curl;
// 2) sshpass;
// 4) expect.
// Сначала происходит проверка того, какая из утилит установлена (в указанной последовательности).
// Если одна из утилит найдена, то через нее выполняется bash-скрипт для установки соединения с SFTP-сервером.
//
// Для отправки на ОС Windows используется WinSCP.
//
// Если указанные выше утилиты не найдены, то их следует установить. В противном случае, будет получена ошибка.
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к FTP-серверу
//  ПараметрыСообщения - Структура - параметры сообщения (см. ПараметрыСообщенияFTP)
//  СтруктураИстории - Структура - см. ПолучитьСтруктуруЗаписиИстории
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция ОтправитьСообщениеSFTP(ИнтеграционныйПоток, ПараметрыСообщения, СтруктураИстории) Экспорт
	
	ПараметрыСоединения = ЗаполнитьПараметрыПодключенияКSFTPСерверу(ИнтеграционныйПоток);
	
	Если ПустаяСтрока(ПараметрыСообщения.Путь) Тогда
		// BSLLS:MissingTemporaryFileDeletion-off
		// Необходимо пропустить проверку, так как файл удаляется позже
		НовыйФайл = ПолучитьИмяВременногоФайла(ПараметрыСообщения.Расширение);
		// BSLLS:MissingTemporaryFileDeletion-on
		ПараметрыСообщения.Данные.Записать(НовыйФайл);
		ПараметрыСообщения.Путь = НовыйФайл;
	КонецЕсли;
	
	СообщениеОбОшибке = ОпределитьТипОтправкиИОтправитьСообщениеНаSFTP(
		ПараметрыСоединения, ПараметрыСообщения, СтруктураИстории);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Получает список файлов с каталога SFTP-сервера.
// Для получения данных на ОС Linux используется одна из установленных утилит:
// 1) curl;
// 2) sshpass;
// 4) expect.
// Сначала происходит проверка того, какая из утилит установлена (в указанной последовательности).
// Если одна из утилит найдена, то через нее выполняется bash-скрипт для установки соединения с SFTP-сервером.
//
// Для отправки на ОС Windows используется WinSCP.
//
// Если указанные выше утилиты не найдены, то их следует установить. В противном случае, будет получена ошибка.
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к FTP-серверу
//  КаталогПоиска		- Строка - каталог поиска файла на FTP-сервере
//  СтруктураИстории    - Структура - см. ПолучитьСтруктуруЗаписиИстории
// 
// Возвращаемое значение:
//  ТаблицаЗначений, Строка - таблица данных файлов (имя файла, дата изменения файла) или описание ошибки
//
Функция ПолучитьСодержимоеКаталогаSFTP(ИнтеграционныйПоток, КаталогПоиска, СтруктураИстории) Экспорт
	
	ПараметрыСоединения = ЗаполнитьПараметрыПодключенияКSFTPСерверу(ИнтеграционныйПоток, Ложь);
	ПараметрыСоединения.КаталогИсходящие = КаталогПоиска;
	
	ФайлыНаРесурсе = ОпределитьТипЧтенияИПрочитатьСодержимоеНаSFTP(ПараметрыСоединения, СтруктураИстории);
	
	Возврат ФайлыНаРесурсе;
	
КонецФункции

// Проверяет наличие файла на SFTP
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к FTP-серверу
//  ИмяФайла			 - Строка - имя искомого файла
//  КаталогПоиска		 - Строка - каталог поиска файла на FTP-сервере
//  ПоТочномуСовпадению	 - Булево - если Истина, то поиск на равенство, если Ложь - по вхождению
//  СтруктураИстории     - Структура - см. ПолучитьСтруктуруЗаписиИстории
// 
// Возвращаемое значение:
//  Булево, Строка - файл найден или описание ошибки
//
Функция ПроверитьФайлЕстьНаSFTP(ИнтеграционныйПоток, ИмяФайла,
	КаталогПоиска, ПоТочномуСовпадению = Истина, СтруктураИстории = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ФайлыНаРесурсе = ПолучитьСодержимоеКаталогаSFTP(ИнтеграционныйПоток, КаталогПоиска, СтруктураИстории);
	
	Если ТипЗнч(ФайлыНаРесурсе) = Тип("Строка") Тогда
		Возврат ФайлыНаРесурсе;
	КонецЕсли;
	
	МассивИменФайлов = ФайлыНаРесурсе.ВыгрузитьКолонку("ИмяФайла");
	Для Каждого ФайлНаСервере Из МассивИменФайлов Цикл
		Если ПоТочномуСовпадению Тогда
			Если ВРег(ФайлНаСервере) = ВРег(ИмяФайла) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если СтрНайти(ВРег(ФайлНаСервере), ВРег(ИмяФайла), НаправлениеПоиска.СНачала) > 0 Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает сообщение с SFTP-сервера.
// Путь к полученному файлу будет лежать в ключе "Путь" структуры ПараметрыСообщения.
//
// Для получения файлов на ОС Linux используется одна из установленных утилит:
// 1) curl;
// 2) sshpass;
// 4) expect.
// Сначала происходит проверка того, какая из утилит установлена (в указанной последовательности).
// Если одна из утилит найдена, то через нее выполняется bash-скрипт для установки соединения с SFTP-сервером.
//
// Для получения на ОС Windows используется WinSCP.
//
// Если указанные выше утилиты не найдены, то их следует установить. В противном случае, будет получена ошибка.
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к FTP-серверу
//  ПараметрыСообщения  - Структура - параметры сообщения (см. ПараметрыСообщенияFTP)
//  СтруктураИстории    - Структура - см. ПолучитьСтруктуруЗаписиИстории
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция ПрочитатьСообщениеSFTP(ИнтеграционныйПоток, ПараметрыСообщения, СтруктураИстории) Экспорт
	
	ПараметрыСоединения = ЗаполнитьПараметрыПодключенияКSFTPСерверу(ИнтеграционныйПоток, , Ложь);
	
	СообщениеОбОшибке = ОпределитьТипПолученияИПолучитьСообщениеНаSFTP(
		ПараметрыСоединения, ПараметрыСообщения, СтруктураИстории);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Удаляет файл с SFTP-сервера.
//
// Для получения файлов на ОС Linux используется одна из установленных утилит:
// 1) curl;
// 2) sshpass;
// 4) expect.
// Сначала происходит проверка того, какая из утилит установлена (в указанной последовательности).
// Если одна из утилит найдена, то через нее выполняется bash-скрипт для установки соединения с SFTP-сервером.
//
// Для получения на ОС Windows используется WinSCP.
//
// Если указанные выше утилиты не найдены, то их следует установить. В противном случае, будет получена ошибка.
//
// Параметры:
//  ИнтеграционныйПоток - СправочникСсылка.пбп_ИнтеграционныеПотоки - интеграционный поток,
//  для которого выполняется подключение к SFTP-серверу
//  ИмяФайла - Строка - имя удаляемого файла
//  КаталогФайла - Строка - каталог файла на сервере
//  ПроверитьНаличиеПередУдалением - Булево - если Истина, то перед удалением будет выполнена проверка наличия файла
//  СтруктураИстории - Структура - см. ПолучитьСтруктуруЗаписиИстории
// 
// Возвращаемое значение:
//  Строка - описание ошибки
//
Функция УдалитьФайлSFTP(ИнтеграционныйПоток, ИмяФайла,
	КаталогФайла, ПроверитьНаличиеПередУдалением, СтруктураИстории) Экспорт
	
	Если ПроверитьНаличиеПередУдалением Тогда
		ФайлЕстьИлиОшибка = ПроверитьФайлЕстьНаSFTP(ИнтеграционныйПоток, ИмяФайла, КаталогФайла);
		
		Если ТипЗнч(ФайлЕстьИлиОшибка) = Тип("Строка") Или Не ФайлЕстьИлиОшибка Тогда
			Возврат ФайлЕстьИлиОшибка;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСоединения = ЗаполнитьПараметрыПодключенияКSFTPСерверу(ИнтеграционныйПоток, Ложь);
	ПараметрыСоединения.КаталогИсходящие = КаталогФайла;
	
	СообщениеОбОшибке = ОпределитьТипУдаленияИУдалитьФайлСSFTP(
		ПараметрыСоединения, ИмяФайла, СтруктураИстории);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

#КонецОбласти // SFTP

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыСоединенияFTPSFTP()
	
	Результат = Новый Структура("Адрес, Порт, Логин, Пароль, КаталогВходящие, КаталогИсходящие");
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьПараметрыПодключенияКSFTPСерверу(ИнтеграционныйПоток,
	ЗаполнитьКаталог = Истина, ИсходящееСообщение = Истина)
	
	СтруктураРеквизитов = пбп_ОбщегоНазначенияСервер.ЗначенияРеквизитовОбъекта(
		ИнтеграционныйПоток, "НастройкаИнтеграции, ТочкаВхода");
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияFTPSFTP(СтруктураРеквизитов.НастройкаИнтеграции);
	
	Если ЗаполнитьКаталог Тогда
		Каталог = СокрЛП(СтруктураРеквизитов.ТочкаВхода);
		Если Лев(Каталог, 1) <> "/" Тогда
			Каталог = "/" + Каталог;
		КонецЕсли;
		
		Если Прав(Каталог, 1) <> "/" Тогда
			Каталог = Каталог + "/";
		КонецЕсли;
		
		Если ИсходящееСообщение Тогда
			ПараметрыСоединения.КаталогИсходящие = Каталог;
		Иначе
			ПараметрыСоединения.КаталогВходящие = Каталог;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСоединения;
	
КонецФункции

Функция ПолучитьТекстСкриптаБезДанныхАутентификации(ПараметрыСоединения, ТекстСкрипта)
	
	ТекстСкриптаБезДанныхАутентификации = СтрЗаменить(ТекстСкрипта, ПараметрыСоединения.Логин + ":", "***:");
	ТекстСкриптаБезДанныхАутентификации = СтрЗаменить(ТекстСкриптаБезДанныхАутентификации,
		":" + ПараметрыСоединения.Пароль, ":***");
	ТекстСкриптаБезДанныхАутентификации = СтрЗаменить(ТекстСкриптаБезДанныхАутентификации,
		"""" + ПараметрыСоединения.Пароль, """***");
	
	Возврат ТекстСкриптаБезДанныхАутентификации;
	
КонецФункции

#Область SFTP

Функция ОпределитьТипОтправкиИОтправитьСообщениеНаSFTP(
	ПараметрыСоединения, ПараметрыСообщения, СтруктураИстории)
	
	ЗаголовокОшибки = "Файл не был отправлен на SFTP-сервер";
	СообщениеОбОшибке = "";
	
	ПутьФайлаНаСервере = СтрШаблон("%1%2.%3", ПараметрыСоединения.КаталогИсходящие,
		ПараметрыСообщения.ИмяФайла, ПараметрыСообщения.Расширение);
	
	ЭтоLinuxСервер = пбп_ОбщегоНазначенияСлужебный.ЭтоLinuxСервер();
	
	ТекстСкрипта = ПолучитьТекстСкриптаОтправкиПоТипуОС(ЭтоLinuxСервер,
		ПараметрыСоединения, ПараметрыСообщения.Путь, ПутьФайлаНаСервере);
	Если ПустаяСтрока(ТекстСкрипта) Тогда
		Возврат ПолучитьТекстОшибкиОтсутствияУтилитыПодключенияSFTP(ЗаголовокОшибки, ЭтоLinuxСервер);
	КонецЕсли;
	
	ДвоичныеДанныеСкрипта = ПолучитьДвоичныеДанныеИзСтроки(ТекстСкрипта);
	Если ЭтоLinuxСервер Тогда
		РасширениеФайлаСкрипта = "sh";
	Иначе
		РасширениеФайлаСкрипта = "bat";
	КонецЕсли;
	// BSLLS:MissingTemporaryFileDeletion-off
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла(РасширениеФайлаСкрипта);
	// BSLLS:MissingTemporaryFileDeletion-on
	ДвоичныеДанныеСкрипта.Записать(ИмяФайлаСкрипта);
	
	СообщениеОбОшибке = ВыполнитьКомандуСистемыПриПолученииИлиОтправке(
		ЭтоLinuxСервер, ТекстСкрипта, ИмяФайлаСкрипта, ЗаголовокОшибки, СтруктураИстории);
	
	Если СтруктураИстории <> Неопределено Тогда
		СтруктураИстории.ИсходящееСообщение = ПолучитьТекстСкриптаБезДанныхАутентификации(
			ПараметрыСоединения, ТекстСкрипта);
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ОпределитьТипЧтенияИПрочитатьСодержимоеНаSFTP(ПараметрыСоединения, СтруктураИстории)
	
	ЗаголовокОшибки = "Не удалось получить содержимое папки SFTP-сервера";
	СообщениеОбОшибке = "";
	
	// BSLLS:MissingTemporaryFileDeletion-off
	ПутьКФайлуСодержимого = ПолучитьИмяВременногоФайла("txt");
	// BSLLS:MissingTemporaryFileDeletion-on
	
	ЭтоLinuxСервер = пбп_ОбщегоНазначенияСлужебный.ЭтоLinuxСервер();
	
	ТекстСкрипта = ПолучитьТекстСкриптаСодержимогоКаталоговПоТипуОС(
		ЭтоLinuxСервер, ПараметрыСоединения, ПутьКФайлуСодержимого);
	Если ПустаяСтрока(ТекстСкрипта) Тогда
		Возврат ПолучитьТекстОшибкиОтсутствияУтилитыПодключенияSFTP(ЗаголовокОшибки, ЭтоLinuxСервер);
	КонецЕсли;
	
	ДвоичныеДанныеСкрипта = ПолучитьДвоичныеДанныеИзСтроки(ТекстСкрипта);
	Если ЭтоLinuxСервер Тогда
		РасширениеФайлаСкрипта = "sh";
	Иначе
		РасширениеФайлаСкрипта = "bat";
	КонецЕсли;
	// BSLLS:MissingTemporaryFileDeletion-off
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла(РасширениеФайлаСкрипта);
	// BSLLS:MissingTemporaryFileDeletion-on
	ДвоичныеДанныеСкрипта.Записать(ИмяФайлаСкрипта);
	
	ИмяСлужебногоФайла = "";
	
	Попытка
		Если ЭтоLinuxСервер Тогда
			ЭтоExpect = СтрНайти(ТекстСкрипта, "expect") > 0;
			Если ЭтоExpect Тогда
				ВспомогательныйСкрипт = СтрШаблон("#!/bin/bash
				|
				|expect %1 > %2", ИмяФайлаСкрипта, ПутьКФайлуСодержимого);
				
				ДвоичныеДанныеСкрипта = ПолучитьДвоичныеДанныеИзСтроки(ВспомогательныйСкрипт);
				// BSLLS:MissingTemporaryFileDeletion-off
				ИмяСлужебногоФайла = ПолучитьИмяВременногоФайла("sh");
				// BSLLS:MissingTemporaryFileDeletion-on
				ДвоичныеДанныеСкрипта.Записать(ИмяСлужебногоФайла);
				
				ИтоговаяКоманда = "sh """ + ИмяСлужебногоФайла + """";
			Иначе
				ИтоговаяКоманда = "sh """ + ИмяФайлаСкрипта + """";
			КонецЕсли;
		Иначе
			ИтоговаяКоманда = """" + ИмяФайлаСкрипта + """";
		КонецЕсли;
		
		ПараметрыЗапускаКоманды = пбп_ФайловаяСистемаПереадресация.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаКоманды.ДождатьсяЗавершения = Истина;
		
		Если СтруктураИстории <> Неопределено Тогда
			НачалоВызова = ТекущаяДатаСеанса();
		КонецЕсли;
		// BSLLS:ExternalAppStarting-off
		Результат = пбп_ФайловаяСистемаПереадресация.ЗапуститьПрограмму(ИтоговаяКоманда, ПараметрыЗапускаКоманды);
		// BSLLS:ExternalAppStarting-on
		Если СтруктураИстории <> Неопределено Тогда
			СтруктураИстории.ДлительностьВызова = ТекущаяДатаСеанса() - НачалоВызова; 
			СтруктураИстории.ПротоколОбмена = ПолучитьТекстСкриптаБезДанныхАутентификации(ПараметрыСоединения, ТекстСкрипта);
		КонецЕсли;
		
		пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ИмяФайлаСкрипта);
		
		Если Не ПустаяСтрока(ИмяСлужебногоФайла) Тогда
			пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ИмяСлужебногоФайла);
		КонецЕсли;
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта, ИмяСлужебногоФайла);
		
		Если Результат.КодВозврата <> 0 Тогда
			ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2 - %3';", ЗаголовокОшибки,
				"не удалось выполнить команду системы, код возврата", Результат.КодВозврата);
			СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
			
			Возврат СообщениеОбОшибке;
		КонецЕсли;
		
		ТаблицаФайлов = ПолучитьТаблицуФайловСодержимогоSFTPСервера(ПутьКФайлуСодержимого);
		
		пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ПутьКФайлуСодержимого);
		
		Возврат ТаблицаФайлов;
	Исключение
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта, ИмяСлужебногоФайла);
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ОпределитьТипПолученияИПолучитьСообщениеНаSFTP(ПараметрыСоединения, ПараметрыСообщения, СтруктураИстории)
	
	ЗаголовокОшибки = "Файл не был получен с SFTP-сервера";
	СообщениеОбОшибке = "";
	
	ПутьФайлаНаСервере = СтрШаблон("%1%2.%3", ПараметрыСоединения.КаталогВходящие,
		ПараметрыСообщения.ИмяФайла, ПараметрыСообщения.Расширение);
	// BSLLS:MissingTemporaryFileDeletion-off
	// Файл не должен удаляться, так как после получения с SFTP-сервера передается в обработку
	ПараметрыСообщения.Путь = ПолучитьИмяВременногоФайла(ПараметрыСообщения.Расширение);
	// BSLLS:MissingTemporaryFileDeletion-on
	
	ЭтоLinuxСервер = пбп_ОбщегоНазначенияСлужебный.ЭтоLinuxСервер();
	
	ТекстСкрипта = ПолучитьТекстСкриптаПолученияПоТипуОС(ЭтоLinuxСервер,
		ПараметрыСоединения, ПараметрыСообщения.Путь, ПутьФайлаНаСервере);
	Если ПустаяСтрока(ТекстСкрипта) Тогда
		Возврат ПолучитьТекстОшибкиОтсутствияУтилитыПодключенияSFTP(ЗаголовокОшибки, ЭтоLinuxСервер);
	КонецЕсли;
	
	ДвоичныеДанныеСкрипта = ПолучитьДвоичныеДанныеИзСтроки(ТекстСкрипта);
	Если ЭтоLinuxСервер Тогда
		РасширениеФайлаСкрипта = "sh";
	Иначе
		РасширениеФайлаСкрипта = "bat";
	КонецЕсли;
	// BSLLS:MissingTemporaryFileDeletion-off
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла(РасширениеФайлаСкрипта);
	// BSLLS:MissingTemporaryFileDeletion-on
	ДвоичныеДанныеСкрипта.Записать(ИмяФайлаСкрипта);
	
	СообщениеОбОшибке = ВыполнитьКомандуСистемыПриПолученииИлиОтправке(
		ЭтоLinuxСервер, ТекстСкрипта, ИмяФайлаСкрипта, ЗаголовокОшибки, СтруктураИстории);
	
	Если СтруктураИстории <> Неопределено Тогда
		СтруктураИстории.ИсходящееСообщение = ПолучитьТекстСкриптаБезДанныхАутентификации(
			ПараметрыСоединения, ТекстСкрипта);
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ОпределитьТипУдаленияИУдалитьФайлСSFTP(ПараметрыСоединения, ИмяФайла, СтруктураИстории)
	
	ЗаголовокОшибки = "Не удалось удалить файл из папки SFTP-сервера";
	СообщениеОбОшибке = "";
	
	ЭтоLinuxСервер = пбп_ОбщегоНазначенияСлужебный.ЭтоLinuxСервер();
	
	ПолныйПутьКФайлу = ПараметрыСоединения.КаталогИсходящие;
	Если Прав(ПолныйПутьКФайлу, 1) <> "/" Тогда
		ПолныйПутьКФайлу = ПолныйПутьКФайлу + "/";
	КонецЕсли;
	
	ПолныйПутьКФайлу = ПолныйПутьКФайлу + ИмяФайла;
	
	ТекстСкрипта = ПолучитьТекстСкриптаУдаленияФайлаПоТипуОС(
		ЭтоLinuxСервер, ПараметрыСоединения, ПолныйПутьКФайлу);
	Если ПустаяСтрока(ТекстСкрипта) Тогда
		Возврат ПолучитьТекстОшибкиОтсутствияУтилитыПодключенияSFTP(ЗаголовокОшибки, ЭтоLinuxСервер);
	КонецЕсли;
	
	ДвоичныеДанныеСкрипта = ПолучитьДвоичныеДанныеИзСтроки(ТекстСкрипта);
	Если ЭтоLinuxСервер Тогда
		РасширениеФайлаСкрипта = "sh";
	Иначе
		РасширениеФайлаСкрипта = "bat";
	КонецЕсли;
	// BSLLS:MissingTemporaryFileDeletion-off
	ИмяФайлаСкрипта = ПолучитьИмяВременногоФайла(РасширениеФайлаСкрипта);
	// BSLLS:MissingTemporaryFileDeletion-on
	ДвоичныеДанныеСкрипта.Записать(ИмяФайлаСкрипта);
	
	ИмяСлужебногоФайла = "";
	
	Попытка
		Если ЭтоLinuxСервер Тогда
			ЭтоExpect = СтрНайти(ТекстСкрипта, "expect") > 0;
			Если ЭтоExpect Тогда
				ИтоговаяКоманда = "expect """ + ИмяФайлаСкрипта + """";
			Иначе
				ИтоговаяКоманда = "sh """ + ИмяФайлаСкрипта + """";
			КонецЕсли;
		Иначе
			ИтоговаяКоманда = """" + ИмяФайлаСкрипта + """";
		КонецЕсли;
		
		ПараметрыЗапускаКоманды = пбп_ФайловаяСистемаПереадресация.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаКоманды.ДождатьсяЗавершения = Истина;
		
		Если СтруктураИстории <> Неопределено Тогда
			НачалоВызова = ТекущаяДатаСеанса();
		КонецЕсли;
		// BSLLS:ExternalAppStarting-off
		Результат = пбп_ФайловаяСистемаПереадресация.ЗапуститьПрограмму(ИтоговаяКоманда, ПараметрыЗапускаКоманды);
		// BSLLS:ExternalAppStarting-on
		Если СтруктураИстории <> Неопределено Тогда
			СтруктураИстории.ДлительностьВызова = ТекущаяДатаСеанса() - НачалоВызова; 
			СтруктураИстории.ПротоколОбмена = ПолучитьТекстСкриптаБезДанныхАутентификации(ПараметрыСоединения, ТекстСкрипта);
		КонецЕсли;
		
		пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ИмяФайлаСкрипта);
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта, ИмяСлужебногоФайла);
		
		Если Результат.КодВозврата <> 0 Тогда
			ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2 - %3';", ЗаголовокОшибки,
				"не удалось выполнить команду системы, код возврата", Результат.КодВозврата);
			СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта, ИмяСлужебногоФайла);
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ВыполнитьКомандуСистемыПриПолученииИлиОтправке(ЭтоLinuxСервер,
	ТекстСкрипта, ИмяФайлаСкрипта, ЗаголовокОшибки, СтруктураИстории)
	
	Попытка
		Если ЭтоLinuxСервер Тогда
			Если СтрНайти(ТекстСкрипта, "expect") > 0 Тогда
				ИтоговаяКоманда = "expect """ + ИмяФайлаСкрипта + """";
			Иначе
				ИтоговаяКоманда = "sh """ + ИмяФайлаСкрипта + """";
			КонецЕсли;
		Иначе
			ИтоговаяКоманда = """" + ИмяФайлаСкрипта + """";
		КонецЕсли;
		
		ПараметрыЗапускаКоманды = пбп_ФайловаяСистемаПереадресация.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаКоманды.ДождатьсяЗавершения = Истина;
		
		Если СтруктураИстории <> Неопределено Тогда
			НачалоВызова = ТекущаяДатаСеанса();
		КонецЕсли;
		// BSLLS:ExternalAppStarting-off
		Результат = пбп_ФайловаяСистемаПереадресация.ЗапуститьПрограмму(ИтоговаяКоманда, ПараметрыЗапускаКоманды);
		// BSLLS:ExternalAppStarting-on
		Если СтруктураИстории <> Неопределено Тогда
			СтруктураИстории.ДлительностьВызова = ТекущаяДатаСеанса() - НачалоВызова;
		КонецЕсли;
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта);
		
		Если Результат.КодВозврата <> 0 Тогда
			ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2 - %3';", ЗаголовокОшибки,
				"не удалось выполнить команду системы, код возврата", Результат.КодВозврата);
			СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = пбп_ИнтеграцииСервер.ПолучитьПодробноеПредставлениеОшибкиИсключения(
			ЗаголовокОшибки, ИнформацияОбОшибке());
		
		УдалитьВременныеФайлыСкриптов(ИмяФайлаСкрипта);
	КонецПопытки;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Процедура УдалитьВременныеФайлыСкриптов(ИмяОсновногоФайла, Знач ИмяВторогоФайла = "")
	
	пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ИмяОсновногоФайла);
	
	Если Не ПустаяСтрока(ИмяВторогоФайла) Тогда
		пбп_ФайловаяСистемаПереадресация.УдалитьВременныйФайл(ИмяВторогоФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстОшибкиОтсутствияУтилитыПодключенияSFTP(ЗаголовокОшибки, ЭтоLinuxСервер)
	
	Если ЭтоLinuxСервер Тогда
		ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2';", ЗаголовокОшибки,
			"Не найдено ни одной установленной утилиты подключения к SFTP (curl, sshpass, expect)");
	Иначе
		ПолноеОписаниеОшибки = СтрШаблон("ru = '%1. Подробно: %2';", ЗаголовокОшибки,
			"Не найдено утилиты подключения к SFTP - WinSCP");
	КонецЕсли;
	
	СообщениеОбОшибке = НСтр(ПолноеОписаниеОшибки);
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

Функция ПолучитьТекстСкриптаОтправкиПоТипуОС(ЭтоLinuxСервер,
	ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере)
	
	Если ЭтоLinuxСервер Тогда
		ИмяУтилиты = ПолучитьИмяУтилитыПодключенияКSFTPLinux();
		
		Если ИмяУтилиты = "curl" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаОтправкиCURL(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		ИначеЕсли ИмяУтилиты = "sshpass" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаОтправкиSSHPASS(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		ИначеЕсли ИмяУтилиты = "expect" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаОтправкиEXPECT(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	Иначе
		УтилитаУстановлена = ПроверитьСуществованиеУтилитыПодключенияКSFTPWindows();
		
		Если УтилитаУстановлена Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаОтправкиДляWinSCP(ПараметрыСоединения);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаСодержимогоКаталоговПоТипуОС(ЭтоLinuxСервер,
	ПараметрыСоединения, ПутьЛокальногоФайла)
	
	Если ЭтоLinuxСервер Тогда
		ИмяУтилиты = ПолучитьИмяУтилитыПодключенияКSFTPLinux();
		
		Если ИмяУтилиты = "curl" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаСодержимогоКаталоговCURL(
				ПараметрыСоединения, ПутьЛокальногоФайла);
		ИначеЕсли ИмяУтилиты = "sshpass" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаСодержимогоКаталоговSSHPASS(
				ПараметрыСоединения, ПутьЛокальногоФайла);
		ИначеЕсли ИмяУтилиты = "expect" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаСодержимогоКаталоговEXPECT(
				ПараметрыСоединения, ПутьЛокальногоФайла);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	Иначе
		УтилитаУстановлена = ПроверитьСуществованиеУтилитыПодключенияКSFTPWindows();
		
		Если УтилитаУстановлена Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаСодержимогоКаталоговДляWinSCP(ПараметрыСоединения);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаПолученияПоТипуОС(ЭтоLinuxСервер,
	ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере)
	
	Если ЭтоLinuxСервер Тогда
		ИмяУтилиты = ПолучитьИмяУтилитыПодключенияКSFTPLinux();
		
		Если ИмяУтилиты = "curl" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаПолученияCURL(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		ИначеЕсли ИмяУтилиты = "sshpass" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаПолученияSSHPASS(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		ИначеЕсли ИмяУтилиты = "expect" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаПолученияEXPECT(
				ПараметрыСоединения, ПутьЛокальногоФайла, ПутьФайлаНаСервере);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	Иначе
		УтилитаУстановлена = ПроверитьСуществованиеУтилитыПодключенияКSFTPWindows();
		
		Если УтилитаУстановлена Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаПолученияДляWinSCP(ПараметрыСоединения);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаУдаленияФайлаПоТипуОС(ЭтоLinuxСервер,
	ПараметрыСоединения, ПолныйПутьКФайлу)
	
	Если ЭтоLinuxСервер Тогда
		ИмяУтилиты = ПолучитьИмяУтилитыПодключенияКSFTPLinux();
		
		Если ИмяУтилиты = "curl" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаУдаленияФайлаCURL(
				ПараметрыСоединения, ПолныйПутьКФайлу);
		ИначеЕсли ИмяУтилиты = "sshpass" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаУдаленияФайлаSSHPASS(
				ПараметрыСоединения, ПолныйПутьКФайлу);
		ИначеЕсли ИмяУтилиты = "expect" Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаУдаленияФайлаEXPECT(
				ПараметрыСоединения, ПолныйПутьКФайлу);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	Иначе
		УтилитаУстановлена = ПроверитьСуществованиеУтилитыПодключенияКSFTPWindows();
		
		Если УтилитаУстановлена Тогда
			ТекстСкрипта = ПолучитьТекстСкриптаУдаленияФайлаДляWinSCP(ПараметрыСоединения);
		Иначе
			ТекстСкрипта = "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТаблицуФайловСодержимогоSFTPСервера(ПутьКФайлуСодержимого)
	
	ТаблицаФайлов = ИнициализироватьТаблицуФайловSFTP();
	ТаблицаСвойствФайлов = ИнициализироватьТаблицуСвойствФайловSFTP();
	
	ЧтениеФайла = Новый ЧтениеТекста(ПутьКФайлуСодержимого);
	ТекущаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		Если Лев(ТекущаяСтрока, 1) = "-" Тогда
			ЗаполнитьСвойстваФайловИзСтрокиСпискаФайлов(ТаблицаСвойствФайлов, ТекущаяСтрока);
		КонецЕсли;
		
		ТекущаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
	КонецЦикла;
	
	Для Каждого СтрокаСвойств Из ТаблицаСвойствФайлов Цикл
		НовыйОписаниеФайла = ТаблицаФайлов.Добавить();
		НовыйОписаниеФайла.ИмяФайла = СтрокаСвойств.ИмяФайла;
		НовыйОписаниеФайла.ДатаИзменения = ПолучитьДатуИзТестовогоФорматаBASHLinux(СтрокаСвойств);
	КонецЦикла;
	
	Возврат ТаблицаФайлов;
	
КонецФункции

Функция ИнициализироватьТаблицуФайловSFTP()
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	
	ДлинаИмениФайла = 150;
	ОписаниеТипаДатаВремя = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	ТаблицаФайлов.Колонки.Добавить("ИмяФайла", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(ДлинаИмениФайла));
	ТаблицаФайлов.Колонки.Добавить("ДатаИзменения", ОписаниеТипаДатаВремя);
	
	Возврат ТаблицаФайлов;
	
КонецФункции

Функция ИнициализироватьТаблицуСвойствФайловSFTP()
	
	ТаблицаСвойствФайлов = Новый ТаблицаЗначений;
	
	// BSLLS:MagicNumber-off
	ТаблицаСвойствФайлов.Колонки.Добавить("Права", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(30));
	ТаблицаСвойствФайлов.Колонки.Добавить("КоличествоСсылок",
		пбп_ОбщегоНазначенияСервер.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСвойствФайлов.Колонки.Добавить("Владелец", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(50));
	ТаблицаСвойствФайлов.Колонки.Добавить("Группа", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(50));
	ТаблицаСвойствФайлов.Колонки.Добавить("Размер",
		пбп_ОбщегоНазначенияСервер.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСвойствФайлов.Колонки.Добавить("Месяц", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(10));
	ТаблицаСвойствФайлов.Колонки.Добавить("Число",
		пбп_ОбщегоНазначенияСервер.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаСвойствФайлов.Колонки.Добавить("ГодВремя", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(5));
	ТаблицаСвойствФайлов.Колонки.Добавить("ЭтоВремя", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойствФайлов.Колонки.Добавить("ИмяФайла", пбп_ОбщегоНазначенияСервер.ОписаниеТипаСтрока(150));
	// BSLLS:MagicNumber-on
	
	Возврат ТаблицаСвойствФайлов;
	
КонецФункции

Процедура ЗаполнитьСвойстваФайловИзСтрокиСпискаФайлов(ТаблицаСвойствФайлов, ТекущаяСтрока)
	
	МассивСвойств = пбп_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, " ", Истина, Истина);
	Инкремент = 0;
	ИмяФайла = "";
	НоваяСтрока = ТаблицаСвойствФайлов.Добавить();
	Для Каждого СтрокаСвойств Из МассивСвойств Цикл
		ТекущееЗначение = СтрокаСвойств;
		// BSLLS:MagicNumber-off
		Если Инкремент = 0 Тогда
			ИмяКолонки = "Права";
		ИначеЕсли Инкремент = 1 Тогда
			ИмяКолонки = "КоличествоСсылок";
			ТекущееЗначение = Число(ТекущееЗначение);
		ИначеЕсли Инкремент = 2 Тогда
			ИмяКолонки = "Владелец";
		ИначеЕсли Инкремент = 3 Тогда
			ИмяКолонки = "Группа";
		ИначеЕсли Инкремент = 4 Тогда
			ИмяКолонки = "Размер";
			ТекущееЗначение = Число(ТекущееЗначение);
		ИначеЕсли Инкремент = 5 Тогда
			ИмяКолонки = "Месяц";
		ИначеЕсли Инкремент = 6 Тогда
			ИмяКолонки = "Число";
			ТекущееЗначение = Число(ТекущееЗначение);
		ИначеЕсли Инкремент = 7 Тогда
			ИмяКолонки = "ГодВремя";
			НоваяСтрока.ЭтоВремя = СтрНайти(ТекущееЗначение, ":") > 0;
		Иначе
			ИмяФайла = ИмяФайла + ?(ПустаяСтрока(ИмяФайла), "", " ") + ТекущееЗначение;
		КонецЕсли;
		
		// Далее должно быть имя файла
		Если Инкремент <= 7 Тогда
			НоваяСтрока[ИмяКолонки] = ТекущееЗначение;
		КонецЕсли;
		// BSLLS:MagicNumber-on
		
		Инкремент = Инкремент + 1;
	КонецЦикла;
	
	НоваяСтрока.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

Функция ПолучитьДатуИзТестовогоФорматаBASHLinux(СтрокаСвойств)
	
	ГодЧислом = ?(СтрокаСвойств.ЭтоВремя, Год(ТекущаяДатаСеанса()), Число(СтрокаСвойств.ГодВремя));
	Месяц = пбп_ОбщегоНазначенияКлиентСервер.ПолучитьНомерМесяцаПоСтроковомуПредставлению(СтрокаСвойств.Месяц);
	ЧислоМесяца = СтрокаСвойств.Число;
	
	ЧасВремя = ?(СтрокаСвойств.ЭтоВремя, СтрокаСвойств.ГодВремя, "00:00");
	
	МассивЧасВремя = пбп_СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЧасВремя, ":");
	
	ДатаИзменения = Дата(ГодЧислом, Месяц, ЧислоМесяца, МассивЧасВремя[0], МассивЧасВремя[1], 0);
	
	Возврат ДатаИзменения;
	
КонецФункции

#Область SFTPWindows

Функция ПроверитьСуществованиеУтилитыПодключенияКSFTPWindows()
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекстСкриптаОтправкиДляWinSCP(ПараметрыСоединения)
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстСкриптаСодержимогоКаталоговДляWinSCP(ПараметрыСоединения)
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстСкриптаПолученияДляWinSCP(ПараметрыСоединения)
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстСкриптаУдаленияФайлаДляWinSCP(ПараметрыСоединения)
	
	Возврат "";
	
КонецФункции

#КонецОбласти // SFTPWindows

#Область SFTPLinux

Функция ПолучитьИмяУтилитыПодключенияКSFTPLinux()
	
	ИмяУстановленнойУтилиты = "";
	
	МассивИменУтилит = Новый Массив;
	МассивИменУтилит.Добавить("curl");
	МассивИменУтилит.Добавить("sshpass");
	МассивИменУтилит.Добавить("expect");
	
	Для Каждого ИмяУтилиты Из МассивИменУтилит Цикл
		Если ПроверитьСуществованиеУтилитыПодключенияКSFTPLinux(ИмяУтилиты) Тогда
			ИмяУстановленнойУтилиты = ИмяУтилиты;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяУстановленнойУтилиты;
	
КонецФункции

Функция ПроверитьСуществованиеУтилитыПодключенияКSFTPLinux(ИмяУтилиты)
	
	РезультатПроверки = Ложь;
	
	// BSLLS:MissingTemporaryFileDeletion-off
	ИмяФайлаПроверки = ПолучитьИмяВременногоФайла("txt");
	// BSLLS:MissingTemporaryFileDeletion-on
	
	КомандаПроверки = СтрШаблон("command -v %1 > %2", ИмяУтилиты, ИмяФайлаПроверки);
	
	ПараметрыЗапускаКоманды = пбп_ФайловаяСистемаПереадресация.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаКоманды.ДождатьсяЗавершения = Истина;
	
	// BSLLS:ExternalAppStarting-off
	Результат = пбп_ФайловаяСистемаПереадресация.ЗапуститьПрограмму(КомандаПроверки, ПараметрыЗапускаКоманды);
	// BSLLS:ExternalAppStarting-on
	
	Если Результат.КодВозврата = 0 Тогда
		ЧтениеФайла = Новый ЧтениеТекста(ИмяФайлаПроверки);
		ТекущаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
		Если ТекущаяСтрока <> Неопределено Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьВременныеФайлыСкриптов(ИмяФайлаПроверки);
	
	Возврат РезультатПроверки;
	
КонецФункции

#Область CURL

Функция ПолучитьТекстСкриптаОтправкиCURL(ПараметрыСоединения, ПутьОтправляемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|curl -k ""sftp://%1%2"" --user ""%3:%4"" -T %5";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПутьФайлаНаСервере,
		ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль, ПутьОтправляемогоФайла);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаСодержимогоКаталоговCURL(ПараметрыСоединения, ПутьКФайлуСодержимогоКаталога)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|curl -k ""sftp://%1%2"" --user ""%3:%4"" > %5";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПараметрыСоединения.КаталогИсходящие,
		ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль, ПутьКФайлуСодержимогоКаталога);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаПолученияCURL(ПараметрыСоединения, ПутьСохраняемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|curl -k ""sftp://%1%2"" --user ""%3:%4"" -o %5";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПутьФайлаНаСервере,
		ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль, ПутьСохраняемогоФайла);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаУдаленияФайлаCURL(ПараметрыСоединения, ПолныйПутьКФайлу)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|curl -k ""sftp://%1:%2"" --user ""%3:%4"" -Q ""rm %5""";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес,
		ПараметрыСоединения.Порт, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль, ПолныйПутьКФайлу);
	
	Возврат ТекстСкрипта;
	
КонецФункции

#КонецОбласти // CURL

#Область SSHPASS

Функция ПолучитьТекстСкриптаОтправкиSSHPASS(ПараметрыСоединения, ПутьОтправляемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|HOST=""%1""
	|USERNAME=""%2""
	|PASSWORD=""%3""
	|PORT=%4
	|
	|sshpass -p ""$PASSWORD"" sftp -oPort=$PORT $USERNAME@$HOST <<EOF
	|put %5 %6
	|EOF";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПараметрыСоединения.КаталогИсходящие,
		ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль, ПутьОтправляемогоФайла, ПутьФайлаНаСервере);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаСодержимогоКаталоговSSHPASS(ПараметрыСоединения, ПутьКФайлуСодержимогоКаталога)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|HOST=""%1""
	|USERNAME=""%2""
	|PASSWORD=""%3""
	|PORT=%4
	|
	|echo 'ls -l %5' | sshpass -p ""$PASSWORD"" sftp -oPort=$PORT $USERNAME@$HOST > %6";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль, ПараметрыСоединения.Порт, ПараметрыСоединения.КаталогИсходящие,
		ПутьКФайлуСодержимогоКаталога);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаПолученияSSHPASS(ПараметрыСоединения, ПутьСохраняемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|HOST=""%1""
	|USERNAME=""%2""
	|PASSWORD=""%3""
	|PORT=%4
	|
	|sshpass -p ""$PASSWORD"" sftp -oPort=$PORT $USERNAME@$HOST <<EOF
	|get %5 %6
	|EOF";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Пароль, ПараметрыСоединения.Порт, ПутьФайлаНаСервере, ПутьСохраняемогоФайла);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаУдаленияФайлаSSHPASS(ПараметрыСоединения, ПолныйПутьКФайлу)
	
	ТекстСкрипта = "#!/usr/bin/bash
	|
	|HOST=""%1""
	|USERNAME=""%2""
	|PASSWORD=""%3""
	|PORT=%4
	|
	|sshpass -p ""$PASSWORD"" sftp -oPort=$PORT $USERNAME@$HOST <<EOF
	|rm %5
	|EOF";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Адрес,
		ПараметрыСоединения.Логин, ПараметрыСоединения.Пароль,
		ПараметрыСоединения.Порт, ПолныйПутьКФайлу);
	
	Возврат ТекстСкрипта;
	
КонецФункции

#КонецОбласти // SSHPASS

#Область EXPECT

Функция ПолучитьТекстСкриптаОтправкиEXPECT(ПараметрыСоединения, ПутьОтправляемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/expect
	|
	|spawn sftp -P %1 %2@%3
	|expect ""%2@%3's password:""
	|send ""%4\n""
	|expect ""sftp>""
	|send ""put %5 %6\n""
	|expect ""sftp>""
	|send ""exit\n""
	|interact";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Порт, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Адрес, ПараметрыСоединения.Пароль, ПутьОтправляемогоФайла, ПутьФайлаНаСервере);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаСодержимогоКаталоговEXPECT(ПараметрыСоединения, ПутьКФайлуСодержимогоКаталога)
	
	ТекстСкрипта = "#!/usr/bin/expect
	|
	|spawn sftp -P %1 %2@%3
	|expect ""%2@%3's password:""
	|send ""%4\n""
	|expect ""sftp>""
	|send ""ls -l %5\n""
	|expect ""sftp>""
	|send ""exit\n""
	|interact";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Порт, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Адрес, ПараметрыСоединения.Пароль, ПараметрыСоединения.КаталогИсходящие);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаПолученияEXPECT(ПараметрыСоединения, ПутьСохраняемогоФайла, ПутьФайлаНаСервере)
	
	ТекстСкрипта = "#!/usr/bin/expect
	|
	|spawn sftp -P %1 %2@%3
	|expect ""%2@%3's password:""
	|send ""%4\n""
	|expect ""sftp>""
	|send ""get %5 %6\n""
	|expect ""sftp>""
	|send ""exit\n""
	|interact";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта, ПараметрыСоединения.Порт, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Адрес, ПараметрыСоединения.Пароль, ПутьФайлаНаСервере, ПутьСохраняемогоФайла);
	
	Возврат ТекстСкрипта;
	
КонецФункции

Функция ПолучитьТекстСкриптаУдаленияФайлаEXPECT(ПараметрыСоединения, ПолныйПутьКФайлу)
	
	ТекстСкрипта = "#!/usr/bin/expect
	|
	|spawn sftp -P %1 %2@%3
	|expect ""%2@%3's password:""
	|send ""%4\n""
	|expect ""sftp>""
	|send ""rm %5\n""
	|expect ""sftp>""
	|send ""exit\n""
	|interact";
	
	ТекстСкрипта = СтрШаблон(ТекстСкрипта,
		ПараметрыСоединения.Порт, ПараметрыСоединения.Логин,
		ПараметрыСоединения.Адрес, ПараметрыСоединения.Пароль,
		ПолныйПутьКФайлу);
	
	Возврат ТекстСкрипта;
	
КонецФункции

#КонецОбласти // EXPECT

#КонецОбласти // SFTPLinux

#КонецОбласти // SFTP

#КонецОбласти // СлужебныеПроцедурыИФункции