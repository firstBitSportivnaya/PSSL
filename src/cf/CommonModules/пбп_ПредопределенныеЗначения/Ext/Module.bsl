// Библиотека проектных подсистем для упрощения разработки архитектуры на 1С: Предприятие 8,
// включая доработку типовых конфигураций.
//
// Copyright First BIT company
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// URL:    https://github.com/firstBitSportivnaya/PSSL/
//

#Область ПрограммныйИнтерфейс

// Инициализирует предопределенные значения из таблицы.
//
// Параметры:
//  МенеджерОбъекта	 - СправочникМенеджер, ПланВидовХарактеристикМенеджер	 - менеджер объекта.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с конфликтными элементами
//
Функция ИнициализироватьПредопределенныеЗначения(МенеджерОбъекта) Экспорт
	
	ТЗПредопределенныхЗначений = пбп_ПредопределенныеЗначенияПереопределяемый
		.ТаблицаПредопределенныхЭлементов(МенеджерОбъекта);
	
	Если ТЗПредопределенныхЗначений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаКонфликтныхЭлементов = ОбработатьПредопределенныеЗначения(ТЗПредопределенныхЗначений, МенеджерОбъекта);
	
	Возврат ТаблицаКонфликтныхЭлементов;
	
КонецФункции

// Обрабатывает таблицу предопределенных элементов. Операции включают в себя: установка пометок удаления
//  на неиспользуемые элементы, отбор предопределенных значений, создание предопределенных элементов.
//
// Параметры:
//  ТаблицаПредопределенных	 - ТаблицаЗначений -
//                         см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных
//  МенеджерОбъекта			 - СправочникМенеджер, ПланВидовХарактеристикМенеджер - менеджер объекта.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с конфликтными элементами
//
Функция ОбработатьПредопределенныеЗначения(ТаблицаПредопределенных, МенеджерОбъекта) Экспорт
	
	Параметры = ДопПараметрыОбработкиПредопределенныхЭлементов(ТаблицаПредопределенных, МенеджерОбъекта);
	
	ОбработатьНеиспользуемыеЭлементы(ТаблицаПредопределенных, Параметры.ПолноеИмя);
	
	ЗаполнитьРодителейЭлементов(ТаблицаПредопределенных, Параметры);
	ЗаполнитьКонтрольныеСуммыТаблицы(ТаблицаПредопределенных, Параметры);
	
	ТаблицаКонфликтныхЭлементов = УдалитьИзТаблицыСуществующиеЭлементы(ТаблицаПредопределенных, Параметры.ПолноеИмя);
	СоздатьОбновитьПредопределенныеЗначения(ТаблицаПредопределенных, Параметры);
	
	Возврат ТаблицаКонфликтныхЭлементов;
	
КонецФункции

// Получает все предопределенные элементы объекта, помечает на удаление те, которые удалены из кода.
// При установке пометки удаления для групп, также устанавливается для всех подчиенных элементов.
//
// Параметры:
//  ТаблицаПредопределенных - ТаблицаЗначений - см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных
//  ПолноеИмяОбъекта		- Строка - Полное имя объекта метаданных.
//
Процедура ОбработатьНеиспользуемыеЭлементы(ТаблицаПредопределенных, ПолноеИмяОбъекта = "") Экспорт
	
	ПолноеИмяОбъекта = ИмяОбъектаМетаданных(ПолноеИмяОбъекта);
	
	ТаблицаПредопределенных.Индексы.Добавить("ИдентификаторНастройки");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	пбп_ПредопределенныеЗначения.Ссылка КАК Ссылка,
		|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки КАК ИдентификаторНастройки
		|ИЗ
		|	%1 КАК пбп_ПредопределенныеЗначения
		|ГДЕ
		|	НЕ пбп_ПредопределенныеЗначения.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|ИТОГИ ПО
		|	Ссылка ИЕРАРХИЯ";
	
	Если пбп_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("пбп_ИспользоватьПользовательскиеФункции") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ
		|	НЕ пбп_ПредопределенныеЗначения.ПометкаУдаления",
		"ГДЕ
		|	НЕ пбп_ПредопределенныеЗначения.ПометкаУдаления
		|	И пбп_ПредопределенныеЗначения.ИдентификаторНастройки <> """"");
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяОбъекта);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПометитьНаУдалениеВсеВложения(Выборка, ТаблицаПредопределенных);
	
КонецПроцедуры

// После удаления уже существующих элементов, остаются только актуальные значения
//  для создания предопределенных элементов.
//
// Параметры:
//  ТаблицаПредопределенных	 - ТаблицаЗначений	 -
//                         см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных
//  ПолноеИмяОбъекта		 - Строка			 - Полное имя объекта метаданных.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с конфликтными элементами
//
Функция УдалитьИзТаблицыСуществующиеЭлементы(ТаблицаПредопределенных, ПолноеИмяОбъекта = "") Экспорт
	
	ТаблицаКонфликтныхЭлементов = ТаблицаПредопределенных.СкопироватьКолонки();
	
	Если Не ЗначениеЗаполнено(ТаблицаПредопределенных) Тогда
		Возврат ТаблицаКонфликтныхЭлементов;
	КонецЕсли;
	
	ПолноеИмяОбъекта = ИмяОбъектаМетаданных(ПолноеИмяОбъекта);
	
	ИдентификаторыНастроек = ТаблицаПредопределенных.ВыгрузитьКолонку("ИдентификаторНастройки");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	пбп_ПредопределенныеЗначения.Ссылка КАК Ссылка,
		|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки КАК ИдентификаторНастройки,
		|	пбп_СостоянияПредопределенныхЭлементов.ХешСумма КАК ХешСумма,
		|	ЕСТЬNULL(пбп_СостоянияПредопределенныхЭлементов.РучноеИзменение, ЛОЖЬ) КАК РучноеИзменение,
		|	пбп_ПредопределенныеЗначения.ПометкаУдаления КАК ПометкаУдаления,
		|	пбп_СостоянияПредопределенныхЭлементов.ХешСумма ЕСТЬ NULL КАК ХешОтсутствует
		|ИЗ
		|	%1 КАК пбп_ПредопределенныеЗначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пбп_СостоянияПредопределенныхЭлементов КАК пбп_СостоянияПредопределенныхЭлементов
		|		ПО пбп_ПредопределенныеЗначения.Ссылка = пбп_СостоянияПредопределенныхЭлементов.Объект
		|ГДЕ
		|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки В(&СписокИдентификаторов)";
		
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяОбъекта);
	
	Запрос.УстановитьПараметр("СписокИдентификаторов", ИдентификаторыНастроек);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	СтрокиДляУдаления = Новый Массив;
	Для Каждого Строка Из ТаблицаПредопределенных Цикл
		ВыборкаДетальныеЗаписи.Сбросить();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Строка.ИдентификаторНастройки, "ИдентификаторНастройки") Тогда
			Если ВыборкаДетальныеЗаписи.РучноеИзменение Или ВыборкаДетальныеЗаписи.ХешСумма = Строка.ХешСумма Тогда
				СтрокиДляУдаления.Добавить(Строка);
			Иначе
				ОбработатьСтроку(Строка, ВыборкаДетальныеЗаписи, ТаблицаКонфликтныхЭлементов, СтрокиДляУдаления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиДляУдаления Цикл
		ТаблицаПредопределенных.Удалить(Строка);
	КонецЦикла;
	
	Возврат ТаблицаКонфликтныхЭлементов;
	
КонецФункции

// Создание предопределенных значений на основании заполненной таблицы
//
// Параметры:
//  ТаблицаПредопределенных	 - ТаблицаЗначений	 -
//                         см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных.
//  ДополнительныеПараметры	 - Структура -
//                         см. пбп_ПредопределенныеЗначения.ДопПараметрыОбработкиПредопределенныхЭлементов.
//
Процедура СоздатьОбновитьПредопределенныеЗначения(ТаблицаПредопределенных, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПредопределенных) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = ДополнительныеПараметры.ПолноеИмя;
	МенеджерОбъекта = ДополнительныеПараметры.Менеджер;
	
	ПолноеИмяОбъекта = ИмяОбъектаМетаданных(ПолноеИмяОбъекта);
	
	Группы = Новый Соответствие;
	КолонкаСуществует = ТаблицаПредопределенных.Колонки.Найти("ЭтоГруппа") <> Неопределено;
	
	Если КолонкаСуществует Тогда
		
		// Сначала создаются группы, затем элементы
		ТаблицаПредопределенных.Сортировать("ЭтоГруппа УБЫВ, УровеньИерархии");
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	пбп_ПредопределенныеЗначения.Ссылка КАК Ссылка,
			|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки КАК ИдентификаторНастройки
			|ИЗ
			|	%1 КАК пбп_ПредопределенныеЗначения
			|ГДЕ
			|	пбп_ПредопределенныеЗначения.ЭтоГруппа";
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(ТекстЗапроса, ПолноеИмяОбъекта);
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Группы.Вставить(ВыборкаДетальныеЗаписи.ИдентификаторНастройки, ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПредопределенных Цикл
		ЭтоГруппа = КолонкаСуществует И СтрокаТаблицы.ЭтоГруппа;
		КлючиХеша = ?(ЭтоГруппа, ДополнительныеПараметры.КлючиХешаГруппа, ДополнительныеПараметры.КлючиХешаЭлемент);
			
		Если СтрокаТаблицы.Служеб_ОбновитьЭлемент Тогда
			ОбновитьЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Группы, КолонкаСуществует);
		ИначеЕсли СтрокаТаблицы.Служеб_УстановитьФлагРучноеИзменение Тогда
			УстановитьФлагРучноеИзменение(СтрокаТаблицы.Служеб_ПредопределенныйЭлемент);
		ИначеЕсли СтрокаТаблицы.Служеб_СоздатьЗаписьРегистра Тогда
			СоздатьЗаписьСостоянияПредопределенногоЭлемента(СтрокаТаблицы.Служеб_ПредопределенныйЭлемент, КлючиХеша);
		Иначе
			СоздатьЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Группы, КолонкаСуществует);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает параметры необходимые для обработки предопределенных элементов
//
// Параметры:
//  Таблица			 - ТаблицаЗначений - см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных.
//  МенеджерОбъекта	 - СправочникМенеджер, ПланВидовХарактеристикМенеджер	 - менеджер объекта.
// 
// Возвращаемое значение:
//  Структура - Данные Менеджера объекта
//  * Менеджер 	- СправочникМенеджер, ПланВидовХарактеристикМенеджер - менеджер объекта.
//  * ПолноеИмя - Строка - Полное имя объекта метаданных.
//
Функция ДопПараметрыОбработкиПредопределенныхЭлементов(Таблица, МенеджерОбъекта) Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Менеджер", МенеджерОбъекта);
	Параметры.Вставить("ПолноеИмя", Метаданные.НайтиПоТипу(ТипЗнч(МенеджерОбъекта)).ПолноеИмя());
	
	мКолонки = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		мКолонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Параметры.Вставить("КлючиХешаЭлемент", КлючиХешаПредопределенногоЭлемента(мКолонки, Ложь));
	Параметры.Вставить("КлючиХешаГруппа", КлючиХешаПредопределенногоЭлемента(мКолонки, Истина));
	
	Возврат Параметры;
	
КонецФункции

// Заполняет хеш предопределенных элементов
//
// Параметры:
//  ТаблицаПредопределенных	 - ТаблицаЗначений -
//                         см. пбп_ПредопределенныеЗначенияПереопределяемый.ТаблицаПредопределенных.
//  ДополнительныеПараметры	 - Структура -
//                         см. пбп_ПредопределенныеЗначения.ДопПараметрыОбработкиПредопределенныхЭлементов.
//
Процедура ЗаполнитьКонтрольныеСуммыТаблицы(ТаблицаПредопределенных, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПредопределенных) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаПредопределенных Цикл
		КлючиХеша = ?(Строка.ЭтоГруппа, ДополнительныеПараметры.КлючиХешаГруппа, ДополнительныеПараметры.КлючиХешаЭлемент);
		ЗаполнитьЗначенияСвойств(КлючиХеша, Строка);
		Строка.ХешСумма = пбп_ОбщегоНазначенияСлужебный.КонтрольнаяСуммаСтрокой(КлючиХеша, ХешФункция.MD5);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ключи хеша на основании массива полей элемента
//
// Параметры:
//  Поля		 - Массив - Поля для формирования ключей хеша
//  ЭтоГруппа	 - Булево - От этого признака зависят исключаемые поля
// 
// Возвращаемое значение:
//  Структура - Ключи хеша
//
Функция КлючиХешаПредопределенногоЭлемента(Поля, ЭтоГруппа = Ложь) Экспорт
	
	мКлючи = Новый Массив;
	
	Если ЭтоГруппа Тогда
		ИсключаемыеПоля = пбп_ПредопределенныеЗначенияПереопределяемый.ИсключаемыеПоляДляРасчетаХешаГруппа();
	Иначе
		ИсключаемыеПоля = пбп_ПредопределенныеЗначенияПереопределяемый.ИсключаемыеПоляДляРасчетаХешаЭлемент();
	КонецЕсли;
	
	Для Каждого Поле Из Поля Цикл
		Если ИсключаемыеПоля.Свойство(Поле)
			Или СтрНачинаетсяС(Поле, "Служеб_") Тогда
			Продолжить;
		КонецЕсли;
		мКлючи.Добавить(Поле);
	КонецЦикла;
	
	Возврат Новый Структура(СтрСоединить(мКлючи, ","));
	
КонецФункции

// Обновляет хеш элемента в регистре, устанавливая при этом ручное изменение.
//
// Параметры:
//  Объект - СправочникОбъект, ПланВидовХарактеристикОбъект	 - предопределенный элемент.
//
Процедура ОбновитьХешЭлемента(Объект) Экспорт
	
	Флаг = пбп_ОбщегоНазначенияСлужебныйКлиентСервер
		.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "РучноеИзменение", Истина);
		
	РегистрыСведений.пбп_СостоянияПредопределенныхЭлементов.ОбновитьХешЭлемента(Объект.Ссылка, Объект.ЭтоГруппа, Флаг);
	
КонецПроцедуры

// Создает запись регистра с заданными параметрами.
//
// Параметры:
//  Объект		 - СправочникСсылка, ПланВидовХарактеристикСсылка	 - Ссылка на предопределенный элемент.
//  ЭтоГруппа	 - Булево - - Признак того что элемент является группой.
//  КлючиХеша	 - Структура, Неопределено - Если ключи хеша не переданы, то они будут сформированы заново.
//
Процедура СоздатьЗаписьСостоянияПредопределенногоЭлемента(Объект, ЭтоГруппа, КлючиХеша = Неопределено) Экспорт
	РегистрыСведений.пбп_СостоянияПредопределенныхЭлементов.СоздатьЗаписьРегистра(Объект, ЭтоГруппа, КлючиХеша);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Родители, ЗаполнитьРодителя = Ложь)
	
	Если СтрокаТаблицы.ЭтоГруппа Тогда
		СоздатьПредопределеннуюГруппу(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Родители);
	Иначе
		СоздатьПредопределенныйЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Родители, ЗаполнитьРодителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПредопределеннуюГруппу(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Группы)
	
	НоваяГруппа = МенеджерОбъекта.СоздатьГруппу();
	
	ЗаполнитьЗначенияСвойств(НоваяГруппа, СтрокаТаблицы, "Наименование,ИдентификаторНастройки");
	ЗаполнитьЗначениеПоУмолчанию(МенеджерОбъекта, НоваяГруппа);
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторРодитель) Тогда
		Родитель = Группы.Получить(СтрокаТаблицы.ИдентификаторРодитель);
		НоваяГруппа.Родитель = Родитель;
	КонецЕсли;
	
	Попытка
		ЗаписатьЭлементИСвязанныеДанные(НоваяГруппа, КлючиХеша);
	Исключение
		пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Группы.Вставить(СтрокаТаблицы.ИдентификаторНастройки, НоваяГруппа.Ссылка);
	
КонецПроцедуры

Процедура СоздатьПредопределенныйЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Родители, ЗаполнитьРодителя = Ложь)
	
	НовыйЭлемент = МенеджерОбъекта.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаТаблицы);
	ЗаполнитьЗначениеПоУмолчанию(МенеджерОбъекта, НовыйЭлемент);
	
	Если ЗаполнитьРодителя И ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторРодитель) Тогда
		Родитель = Родители.Получить(СтрокаТаблицы.ИдентификаторРодитель);
		НовыйЭлемент.Родитель = Родитель;
	КонецЕсли;
	
	Попытка
		ЗаписатьЭлементИСвязанныеДанные(НовыйЭлемент, КлючиХеша);
	Исключение
		пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьЭлемент(МенеджерОбъекта, СтрокаТаблицы, КлючиХеша, Родители, ЗаполнитьРодителя = Ложь)
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Служеб_ПредопределенныйЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = СтрокаТаблицы.Служеб_ПредопределенныйЭлемент.ПолучитьОбъект();
	Если Элемент.ПометкаУдаления Тогда
		Элемент.УстановитьПометкуУдаления(Ложь, Ложь);
	КонецЕсли;
	
	РодительОтличается = Ложь;
	Если ЗаполнитьРодителя Тогда
		Если Не ПустаяСтрока(СтрокаТаблицы.ИдентификаторРодитель) Или ЗначениеЗаполнено(Элемент.Родитель) Тогда
			НовыйРодитель = Родители[СтрокаТаблицы.ИдентификаторРодитель];
			РодительОтличается = Элемент.Родитель <> НовыйРодитель;
			Если РодительОтличается Тогда
				Элемент.Родитель = НовыйРодитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СписокСвойств = "";
	ИсключаяСвойства = "";
	Если Элемент.ЭтоГруппа Тогда
		СписокСвойств = "Наименование,ИдентификаторНастройки";
	Иначе
		ИсключаяСвойства = "Родитель";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Элемент, СтрокаТаблицы, СписокСвойств, ИсключаяСвойства);
	
	ЗаполнитьЗначениеПоУмолчанию(МенеджерОбъекта, Элемент);
	
	Попытка
		ЗаписатьЭлементИСвязанныеДанные(Элемент, КлючиХеша, Истина);
		СообщитьОбИзмененииЭлемента(Элемент);
		Если РодительОтличается Тогда
			СообщитьОбИзмененииРасположенияЭлемента(Элемент);
		КонецЕсли;
	Исключение
		пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеПоУмолчанию(МенеджерОбъекта, Элемент)
	
	ПроверяемыйТип = ТипЗнч(МенеджерОбъекта);
	Если ПроверяемыйТип = Тип("ПланВидовХарактеристикМенеджер.пбп_ПредопределенныеЗначения")
		И Не Элемент.ЭтоГруппа Тогда
		Элемент.Значение = Элемент.ТипЗначения.ПривестиЗначение();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФлагРучноеИзменение(Элемент)
	РегистрыСведений.пбп_СостоянияПредопределенныхЭлементов.ОбновитьФлагРучногоИзменения(Элемент, Истина);
КонецПроцедуры

Процедура ПометитьНаУдалениеВсеВложения(ИерархическаяВыборка, ТаблицаАктуальныхЭлементов)
	
	Пока ИерархическаяВыборка.Следующий() Цикл
		
		Строка = ТаблицаАктуальныхЭлементов.Найти(ИерархическаяВыборка.ИдентификаторНастройки, "ИдентификаторНастройки");
		Если Строка = Неопределено Тогда
			Элемент = ИерархическаяВыборка.Ссылка.ПолучитьОбъект();
			Элемент.УстановитьПометкуУдаления(Истина, Истина);
			СообщитьОПомеченномНаУдалениеЭлементе(Элемент);
			Продолжить;
		КонецЕсли;
		
		СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией;
		
		Если ИерархическаяВыборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ДочерняяВыборка = ИерархическаяВыборка.Выбрать(СпособВыборки, ИерархическаяВыборка.Группировка());
		Иначе
			ДочерняяВыборка = ИерархическаяВыборка.Выбрать(СпособВыборки);
		КонецЕсли;
		
		ПометитьНаУдалениеВсеВложения(ДочерняяВыборка, ТаблицаАктуальныхЭлементов);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолноеИмяОбъектаПоУмолчанию()
	Возврат "ПланВидовХарактеристик.пбп_ПредопределенныеЗначения";
КонецФункции

#Область СообщенияОСобытии

Процедура СообщитьОПомеченномНаУдалениеЭлементе(Элемент)
	
	ТекстСообщения = НСтр("ru = 'Элемент ''%1'' помечен на удаление';
							|en = 'The item ''%1'' is marked for deletion'");
	Если ЗначениеЗаполнено(Элемент.Родитель) Тогда
		ТекстСообщения = ТекстСообщения + НСтр("ru = ', включая все его подчиненные элементы.';
												|en = ', including all its subordinate items.'");
	КонецЕсли;
	ТекстСообщения = пбп_СтроковыеФункцииСлужебныйКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		Элемент.Ссылка);
	пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ТекстСообщения, Элемент);
	
КонецПроцедуры

Процедура СообщитьОбИзмененииРасположенияЭлемента(Элемент)
	
	ТекстСообщения = НСтр("ru = 'Расположение элемента ''%1'' изменено. Текущее положение: ''%2''';
							|en = 'The location of element ''%1'' has changed. Current position: ''%2'''");
	Родитель = ?(ЗначениеЗаполнено(Элемент.Родитель), Элемент.Родитель, НСтр("ru = '''<корень>'''; en = '''<root>'''"));
	ТекстСообщения = пбп_СтроковыеФункцииСлужебныйКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		Элемент.Ссылка,
		Родитель);
	пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ТекстСообщения, Элемент);
	
КонецПроцедуры

Процедура СообщитьОбИзмененииЭлемента(Элемент)
	
	ТекстСообщения = НСтр("ru = 'Элемент ''%1'' успешно обновлен!';
							|en = 'Item ''%1'' was successfully updated!'");
	ТекстСообщения = пбп_СтроковыеФункцииСлужебныйКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		Элемент.Ссылка);
	пбп_ОбщегоНазначенияСлужебный.СообщитьПользователю(ТекстСообщения, Элемент);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьРодителейЭлементов(Таблица, Параметры)
	
	Идентификаторы = Таблица.ВыгрузитьКолонку("ИдентификаторРодитель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пбп_ПредопределенныеЗначения.Ссылка КАК Ссылка,
		|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки КАК ИдентификаторНастройки
		|ИЗ
		|	%1 КАК пбп_ПредопределенныеЗначения
		|ГДЕ
		|	пбп_ПредопределенныеЗначения.ИдентификаторНастройки В(&ИдентификаторыРодитель)";
	
	Запрос.Текст = СтрШаблон(Запрос.Текст, Параметры.ПолноеИмя);
	
	Запрос.УстановитьПараметр("ИдентификаторыРодитель", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Для Каждого Строка Из Таблица Цикл
		ВыборкаДетальныеЗаписи.Сбросить();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(Строка.ИдентификаторРодитель, "ИдентификаторНастройки") Тогда
			Строка.Родитель = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЭлементИСвязанныеДанные(Элемент, КлючиХеша, Обновление = Ложь)
	
	Элемент.ДополнительныеСвойства.Вставить("РучноеИзменение", Ложь);
	Элемент.Записать();
	
	Если Обновление Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЗаписьСостоянияПредопределенногоЭлемента(Элемент.Ссылка, Элемент.ЭтоГруппа, КлючиХеша);
	
КонецПроцедуры

Функция ИмяОбъектаМетаданных(ПолноеИмяОбъекта)
	Если ПустаяСтрока(ПолноеИмяОбъекта) Тогда
		Возврат ПолноеИмяОбъектаПоУмолчанию();
	КонецЕсли;
	
	Возврат ПолноеИмяОбъекта;
КонецФункции

Процедура ОбработатьСтроку(Строка, Выборка, ТаблицаКонфликтныхЭлементов, СтрокиДляУдаления)
	Строка.Служеб_ПредопределенныйЭлемент = Выборка.Ссылка;
	
	Если Выборка.ХешОтсутствует Тогда
		Строка.Служеб_СоздатьЗаписьРегистра = Истина;
	ИначеЕсли Выборка.ПометкаУдаления Тогда
		Строка.Служеб_ОбновитьЭлемент = Истина;
	Иначе
		СтрокиДляУдаления.Добавить(Строка);
		СтрокаКонфликт = ТаблицаКонфликтныхЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонфликт, Строка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти